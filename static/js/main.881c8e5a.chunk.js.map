{"version":3,"sources":["util/Firebase.js","util/Google.js","util/index.js","client.js","views/Login.js","views/Issue.js","views/Setting.js","views/MyInfo.js","views/components/Loading.js","views/components/BsModal.js","image-upload/ipfs.js","image-upload/image.js","views/CertCell.js","views/CertList.js","views/MyPage.js","views/404.js","views/CertView.js","views/User.js","App.js","reportWebVitals.js","util/ClientWithIpfs.js","actions/index.js","initialState.js","store.js","reducer.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","auth","GoogleAuthProvider","getGoogleUid","a","signInWithPopup","result","user","uid","dateString","date","getFullYear","getMonth","getDate","clientWithoutAccount","Client","getClientFromState","client","address","rsaKeyPair","privKey","cryptico","generateRSAKey","pubKey","publicKeyString","getKeyPair","profile","cache","seed","CertClient","Login","className","onClick","this","props","React","Component","IssueComponent","type","id","onChange","onChangeCertificateImage","onChangeTitle","onChangeDescription","onChangeIssueTo","onClickIssueButton","SettingComponent","onClickUpdateButton","onChangeName","defaultValue","name","onChangeIcon","MyInfoComponent","text","copyFrom","document","createElement","textContent","bodyElm","getElementsByTagName","appendChild","select","execCommand","removeChild","copyText","onCopyId","alt","src","icon","href","copyId","bind","to","exportAccount","logout","nextProps","prevState","CommunicationLoading","style","marginLeft","marginRight","width","BsModal","modal","isLoading","Modal","show","animation","Body","message","errorMessage","Footer","Button","variant","closeModal","ipfs","IpfsHttpClient","host","port","protocol","postCertificate","blob","add","response","path","Error","postText","createImageUrlFromUint8Array","arr","Blob","window","URL","webkitURL","createObjectURL","concatBuffer","buffer1","buffer2","tmp","Uint8Array","byteLength","set","buffer","getImageOnIpfs","ipfsHash","async","get","data","console","log","content","ArrayBuffer","url","uintToString","array","out","i","len","c","char2","char3","length","String","fromCharCode","getTextOnIpfs","require","fileInputToDataURL","file","Promise","resolve","reject","reader","FileReader","addEventListener","readAsDataURL","createBlobFromImageDataURI","uri","byteString","atob","split","mimeType","match","l","charCodeAt","CertCellComponent","certificate","imageUrl","title","titleInIpfs","substr","byProfile","toProfile","Date","time","CertListComponent","getInfoOfCertificates","certificates","map","index","MyCertListComponent","changeTabToMyCertificates","getCertificates","changeTabToIssueser","getCertificatesIIssuesed","tab","certificatesIIssuesed","getInfoOfCertificatesIIssuesed","MyPageComponent","NotFoundComponent","CertViewComponent","parseInt","params","state","verified","setState","loadDetail","loadImage","loadTitle","loadDescription","error","descriptionInIpfs","description","verifyCertificate","back","next","by","issueserName","UserComponent","fetchProfile","isNotFound","App","myPageRef","createRef","myPageIsLoading","issuePageIsLoading","that","modalIsShow","myProfile","login","loginWithGoogle","main","exact","render","tabInMyPage","issue","updateUserSetting","routeProps","profileInUserPage","fetchProfileInUserPage","iconInUserPage","nameInUserPage","userPageIsLoading","certificatesInUserPage","certificatesIIssuesedInUserPage","getCertificatesInUserPage","getCertificatesIIssuesedInUserPage","getInfoOfCertificatesInUserPage","getInfoOfCertificatesIIssuesedInUserPage","changeTabInUserPageToIssueser","changeTabInUserPageToMyCertificates","tabInUserPage","userIsNotFound","location","pathname","startsWith","withRouter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","update","fail","catch","err","getProfile","dispatch","getState","payload","getCertificatesWithIpfs","getCertificatesIIssuesedWithIpfs","initialState","certificateImage","issueTo","persistConfig","key","storage","persistedReducer","persistReducer","action","Object","assign","trim","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","persistor","persistStore","RxApp","connect","image","ipfsHashOfImage","imageData","ipfsHashOfTitle","ipfsHashOfDescription","createCertificateObject","issueCertificate","evt","target","value","files","getMyProfile","ipfsHashOfName","nameInIpfs","registerName","registerIcon","json","JSON","stringify","download","init","ReactDOM","loading","getElementById"],"mappings":"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","file":"static/js/main.881c8e5a.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBVg-6cdqXuAnS2gECbjHlbJd_Lt8qyQWw\",\n  authDomain: \"gxcert-21233.firebaseapp.com\",\n  projectId: \"gxcert-21233\",\n  storageBucket: \"gxcert-21233.appspot.com\",\n  messagingSenderId: \"500830367528\",\n  appId: \"1:500830367528:web:dfdb8fe5fa6b362d8faa1d\",\n  measurementId: \"G-ZGY6X71Q2R\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n//firebase.analytics();\n\nexport default firebase;\n","import firebase from \"./Firebase\";\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nasync function getGoogleUid() {\n  const result = await firebase.auth().signInWithPopup(provider);\n  return result.user.uid;\n}\n\nexport { getGoogleUid };\n","import { getGoogleUid } from \"./Google\";\n\nfunction copyText(text) {\n  const copyFrom = document.createElement(\"textarea\");\n  copyFrom.textContent = text;\n  const bodyElm = document.getElementsByTagName(\"body\")[0];\n  bodyElm.appendChild(copyFrom);\n  copyFrom.select();\n  document.execCommand('copy');\n  bodyElm.removeChild(copyFrom);\n}\n\nfunction getUrlQueries() {\n  let queryStr = window.location.search.slice(1);\n  let queries = {};\n  if (!queryStr) {\n    return queries;\n  }\n  queryStr.split(\"&\").forEach(function (queryStr) {\n    var queryArr = queryStr.split(\"=\");\n    queries[queryArr[0]] = queryArr[1];\n  });\n  return queries;\n}\nfunction dateString(date) {\n  return (\n    date.getFullYear() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getDate()\n  );\n}\n\n\nexport {\n  copyText,\n  getUrlQueries,\n  getGoogleUid,\n  dateString,\n}\n\n","import * as Client from \"gxcert-iota\";\nimport cryptico from \"cryptico\";\n\nconst clientWithoutAccount = new Client(\"https://nodes.devnet.iota.org\");\nfunction getKeyPair(uid) {\n  const privKey = cryptico.generateRSAKey(uid, 1024);\n  const pubKey = cryptico.publicKeyString(privKey);\n  return {\n    privKey,\n    pubKey,\n  }\n}\nfunction getClientFromState (client) {\n  const result = new Client(\"https://nodes.devnet.iota.org\");\n  result.address = client.address;\n  result.rsaKeyPair = getKeyPair(client.uid);\n  result.profile = client.profile;\n  result.cache = client.cache;\n  result.uid = client.uid;\n  result.seed = client.seed;\n  return result;\n}\n\nexport default function CertClient(uid) {\n  return new Client(\"https://nodes.devnet.iota.org\", uid);\n}\n\nexport {\n  getClientFromState,\n  clientWithoutAccount\n}\n\n","import React from \"react\";\nimport \"./Login.css\";\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div className=\"login-page\">\n        <button className=\"login-google\" onClick={this.props.onClick}>\n          Login with Google\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport \"./Issue.css\";\nimport \"./reset.css\";\n\n\nclass IssueComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"issue\">\n        <div className=\"issue-wrapper\">\n          <h2 className=\"issue-title\">Issue Certificate</h2>\n          <h5 className=\"issue-image-title issue-input-title\">Certificate Image</h5>\n          <input type=\"file\" id=\"issue-image\" className=\"issue-image issue-input\" onChange={this.props.onChangeCertificateImage} />\n          <h5 className=\"issue-to-title issue-input-title\">Title</h5>\n          <input type=\"text\" id=\"issue-title\" className=\"issue-input\" onChange={this.props.onChangeTitle} /><br/>\n          <h5 className=\"issue-to-description issue-input-title\">Description</h5>\n          <textarea id=\"issue-description\" className=\"issue-description issue-input\" onChange={this.props.onChangeDescription}></textarea><br/>\n          <h5 className=\"issue-to-title issue-input-title\">To</h5>\n          <input type=\"text\" id=\"issue-to\" className=\"issue-to issue-input\" onChange={this.props.onChangeIssueTo} /><br/>\n          <button className=\"issue-button\" id=\"issue-button\" onClick={this.props.onClickIssueButton}>Issue</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  IssueComponent,\n}\n","import React from \"react\";\nimport \"./Setting.css\";\n\nclass SettingComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickUpdateButton = props.onClickUpdateButton;\n  }\n  render () {\n    return (\n      <div className=\"setting\">\n        <div className=\"setting-wrapper\">\n          <h2 className=\"setting-title\">\n            User Settings\n          </h2>\n          <h5 className=\"setting-name-title setting-input-title\">Your Name</h5>\n          <input type=\"text\" id=\"setting-name\" className=\"setting-name setting-input\" onChange={this.props.onChangeName} defaultValue={this.props.name} />\n          <h5 className=\"setting-icon-title setting-input-title\">Icon</h5>\n          <input type=\"file\" id=\"setting-icon\" className=\"setting-icon setting-input\" onChange={this.props.onChangeIcon} />\n          <button className=\"setting-button\" id=\"setting-button\" onClick={this.props.onClickUpdateButton}>Update</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  SettingComponent\n}\n","import \"./MyInfo.css\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { copyText } from \"../util\";\n\nclass MyInfoComponent extends React.Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return {\n      address: nextProps.address,\n      icon: nextProps.icon,\n    }\n  }\n  copyId() {\n    copyText(this.props.address);\n    this.props.onCopyId();\n  }\n  render() {\n    return (\n      <div className=\"myinfo\">\n        <img className=\"myinfo-image\" alt=\"GxCert icon\" src={this.props.icon} />\n        <div className=\"myinfo-right\">\n          <div className=\"myinfo-address\">\n            { \"Your ID: \" + this.props.address }\n          </div>\n          <div className=\"myinfo-buttons\">\n            <a href=\"javascript:void(0)\" className=\"copy-button\" onClick={this.copyId.bind(this)}>Copy ID</a> | <Link className=\"myinfo-register\" to=\"/user\">Update your user info</Link> | <a href=\"javascript:void(0)\" className=\"export-button\" onClick={this.props.exportAccount}>Export Account</a> | <a href=\"javascript:void(0)\" className=\"logout-button\" onClick={this.props.logout}>Logout</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  MyInfoComponent\n}\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\n\nconst CommunicationLoading = () => (\n  <ReactLoading type=\"spin\" style={{marginLeft: \"auto\", marginRight: \"auto\", width: 150}} />\n);\n\nexport default CommunicationLoading;\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport CommunicationLoading from \"./Loading\";\nimport \"./BsModal.css\";\n\nexport default class BsModal extends React.Component {\n  render() {\n    let modal = null;\n    if (this.props.isLoading) {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            { this.props.message !== null ? (<p className=\"message\">{ this.props.message }</p>) : \"\" }\n            <CommunicationLoading />\n          </Modal.Body>\n        </Modal>\n      );\n    } else if (this.props.message !== null || this.props.errorMessage !== null) {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            <p className=\"message\">{ this.props.message }</p>\n            <p className=\"error-message\">{ this.props.errorMessage }</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={this.props.closeModal} >\n              Back\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )\n    }\n    return (\n      <div className=\"modal\">\n        { modal }\n      </div>\n    );\n  }\n}\n","import * as IpfsHttpClient from \"ipfs-http-client\";\nconst ipfs = IpfsHttpClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\nasync function postCertificate(blob) {\n  const response = await ipfs.add(blob);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the certificate to IPFS network.\");\n}\nasync function postText(text) {\n  const response = await ipfs.add(text);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the text to IPFS network.\");\n}\n\nfunction createImageUrlFromUint8Array(arr) {\n  const blob = new Blob([arr]);\n  const urlCreator = window.URL || window.webkitURL;\n  const imageUrl = urlCreator.createObjectURL(blob);\n  return imageUrl;\n}\nvar concatBuffer = function (buffer1, buffer2) {\n  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n};\n\nasync function getImageOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    const url = createImageUrlFromUint8Array(content);\n    return url;\n  }\n  return null;\n}\n\nfunction uintToString(array) {\n  var out, i, len, c;\n  var char2, char3;\n\n  out = \"\";\n  len = array.length;\n  i = 0;\n  while (i < len) {\n    c = array[i++];\n    switch (c >> 4)\n    {\n      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12: case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(((c & 0x0F) << 12) |\n                                   ((char2 & 0x3F) << 6) |\n                                   ((char3 & 0x3F) << 0));\n        break;\n    }\n  }\n  return out;\n}\nasync function getTextOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    return uintToString(new Uint8Array(content));\n  }\n  return null;\n}\n\n\nexport { getImageOnIpfs, getTextOnIpfs, postCertificate, postText };\n","const crypto = require(\"crypto\");\n\nfunction getPixelsFromContext(context, width, height) {\n  let result = [];\n  for (let i = 0; i < height; i++) {\n    result.push([]);\n    for (let j = 0; j < width; j++) {\n      const pixel = context.getImageData(j, i, 1, 1).data;\n      result[i].push([pixel[0], pixel[1], pixel[2]]);\n    }\n  }\n  return result;\n}\n\nfunction getPixelsFromImage(fileElement) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    const img = new Image();\n    reader.onload = function () {\n      img.src = reader.result;\n      img.onload = function () {\n        const canvas = document.createElement(\"canvas\");\n        const context = canvas.getContext(\"2d\");\n        context.drawImage(img, 0, 0);\n        const pixels = getPixelsFromContext(context, img.width, img.height);\n        resolve(pixels);\n      };\n    };\n    reader.readAsDataURL(fileElement.files[0]);\n  });\n}\n\nasync function getHashFromImage(fileElement) {\n  const pixels = await getPixelsFromImage(fileElement);\n  return makeHashFromPixels(pixels);\n}\n\nfunction makeHashFromPixels(pixels) {\n  const text = pixels\n    .map((row) => {\n      console.log(row);\n      return row\n        .map((pixel) => {\n          return \"\" + pixel[0] + pixel[1] + pixel[2];\n        })\n        .join(\"\");\n    })\n    .join(\"\");\n  console.log(text);\n  const md5 = crypto.createHash(\"md5\");\n  return md5.update(text, \"binary\").digest(\"hex\");\n}\n\nfunction fileInputToDataURL(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener(\n      \"load\",\n      () => {\n        resolve(reader.result);\n      },\n      false\n    );\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction createBlobFromImageDataURI(uri) {\n  const byteString = atob(uri.split(\",\")[1]);\n  const mimeType = uri.match(/(:)([a-z/]+)(;)/)[2];\n  for (\n    var i = 0, l = byteString.length, content = new Uint8Array(l);\n    l > i;\n    i++\n  ) {\n    content[i] = byteString.charCodeAt(i);\n  }\n\n  const blob = new Blob([content], {\n    type: mimeType,\n  });\n  return blob;\n}\n\nexport { fileInputToDataURL, createBlobFromImageDataURI, getHashFromImage };\n","import React from \"react\";\nimport \"./Certificate.css\";\nimport { dateString } from \"../util\";\nimport { getImageOnIpfs } from \"../image-upload\";\n\nfunction displayedTitle(title) {\n  if (!title) {\n    return \"\";\n  }\n  if (title.length > 16) {\n    return title.substr(0, 16) + \"...\";\n  }\n  return title;\n}\nclass CertCellComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n  }\n  render() {\n    return (\n      <div className=\"cert-cell\">\n        <img src={!this.props.certificate.imageUrl ? \"\" : this.props.certificate.imageUrl} className=\"cert-cell-image\" alt=\"certificate\" />\n        <div className=\"cert-cell-info\">\n          <p className=\"cert-cell-title\">\n            { displayedTitle(this.props.certificate.titleInIpfs) }\n          </p>\n          <p className=\"cert-cell-issueser\">\n            { this.props.certificate.byProfile ? \"by \" + this.props.certificate.byProfile.name.substr(0, 16) : \"\" } { this.props.certificate.toProfile ? \"to \" + this.props.certificate.toProfile.name.substr(0, 16) : \"\" }\n          </p>\n          <p className=\"cert-cell-date\">\n            at {\n              dateString(new Date(this.props.certificate.time * 1000))\n            }\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  CertCellComponent\n};\n","import React from \"react\";\nimport { CommunicationLoading } from \"./components\";\nimport \"./Certificate.css\";\nimport { Link } from \"react-router-dom\";\nimport { CertCellComponent } from \"./CertCell\";\n\n\nclass CertListComponent extends React.Component {\n  componentDidMount() {\n    this.props.getInfoOfCertificates();\n  }\n  render() {\n    return (\n      <div className=\"certificates\">\n        { this.props.certificates.length === 0 ? <p className=\"certificate-not-found\">There are no certificates.</p> : \"\" }\n        { this.props.certificates.map((certificate, index) => {\n          return (\n            <Link to={\"/\" + this.props.path + \"/\" + index}>\n              <CertCellComponent certificate={certificate} />\n            </Link>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\n\nclass MyCertListComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"mycertificates\">\n        <h2 className=\"mycertificates-title\"><a href=\"javascript:void(0)\" onClick={this.props.changeTabToMyCertificates}> My Certificates</a><span onClick={this.props.getCertificates}>🔃</span> <a href=\"javascript:void(0)\" onClick={this.props.changeTabToIssueser} >Certificates I issuesed</a><span onClick={this.props.getCertificatesIIssuesed}>🔃</span></h2>\n        { this.props.isLoading ? <CommunicationLoading /> : \"\" }\n        { !this.props.isLoading && this.props.tab === 0 ? <CertListComponent\n          certificates={this.props.certificates}\n          path={\"certs\"}\n          getInfoOfCertificates={this.props.getInfoOfCertificates}\n        /> : \"\" }\n        { !this.props.isLoading && this.props.tab === 1 ? <CertListComponent\n          certificates={this.props.certificatesIIssuesed}\n          getInfoOfCertificates={this.props.getInfoOfCertificatesIIssuesed}\n          path={\"issuesed\"}\n        /> : \"\" }\n      </div>\n    );\n  }\n}\n\nexport {\n  CertListComponent,\n  MyCertListComponent,\n}\n","import React from \"react\";\nimport { MyInfoComponent } from \"./MyInfo\";\nimport { MyCertListComponent } from \"./CertList\";\n\nclass MyPageComponent extends React.Component {\n  componentDidMount() {\n    if (this.props.certificates.length === 0) {\n      this.props.getCertificates();\n    }\n  }\n  render() {\n    return (\n      <div className=\"show\">\n        <MyInfoComponent \n          address={this.props.address} \n          icon={this.props.icon} \n          exportAccount={this.props.exportAccount} \n          onCopyId={this.props.onCopyId}\n          logout={this.props.logout}\n        />\n        <MyCertListComponent \n          certificates={this.props.certificates}\n          certificatesIIssuesed={this.props.certificatesIIssuesed}\n          isLoading={this.props.isLoading} \n          getCertificates={this.props.getCertificates}\n          getCertificatesIIssuesed={this.props.getCertificatesIIssuesed}\n          changeTabToIssueser={this.props.changeTabToIssueser}\n          changeTabToMyCertificates={this.props.changeTabToMyCertificates}\n          tab={this.props.tab}\n          getInfoOfCertificates={this.props.getInfoOfCertificates}\n          getInfoOfCertificatesIIssuesed={this.props.getInfoOfCertificatesIIssuesed}\n        />\n      </div>\n    );\n  }\n}\n\nexport {\n  MyPageComponent,\n}\n","import React from \"react\";\n\nclass NotFoundComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"not-found\">\n        <h2>404 Not Found.</h2>\n      </div>\n    );\n  }\n}\n\nexport default NotFoundComponent;\n","import React from \"react\";\nimport \"./Certificate.css\";\nimport { getTextOnIpfs, getImageOnIpfs } from \"../image-upload\";\nimport { dateString } from \"../util\";\nimport { Link } from \"react-router-dom\";\nimport NotFoundComponent from \"./404\";\n\nclass CertViewComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.client = props.client;\n    const index = parseInt(props.match.params.index);\n    this.index = index;\n    this.state = {\n      certificates: props.certificates,\n      index: index,\n      verified: null,\n      title: \"\",\n      imageUrl: \"\",\n    }\n  }\n  back() {\n    if (this.state.index > 0) {\n      this.setState({\n        index: this.state.index - 1,\n        verified: null,\n      });\n      this.loadDetail();\n    }\n  }\n  next() {\n    if (this.state.index < this.state.certificates.length - 1) {\n      this.setState({\n        index: this.state.index + 1,\n        verified: null,\n      });\n      this.loadDetail();\n    }\n  }\n  loadDetail() {\n    this.loadImage();\n    this.loadTitle();\n    this.loadDescription();\n  }\n  async loadImage() {\n    if (this.state.index < 0 || this.props.certificates.length <= this.state.index) {\n      return;\n    }\n    const certificate = this.state.certificates[this.state.index];\n    if (certificate.imageUrl) {\n      this.setState({\n        imageUrl: certificate.imageUrl\n      });\n      return;\n    }\n    let imageUrl;\n    try {\n      imageUrl = await getImageOnIpfs(certificate.ipfs);\n    } catch(err) {\n      console.error(err);\n      return;\n    }\n    this.setState({\n      imageUrl\n    });\n  }\n  async loadTitle() {\n    if (this.state.index < 0 || this.props.certificates.length <= this.state.index) {\n      return;\n    }\n    const certificate = this.state.certificates[this.state.index];\n    if (certificate.titleInIpfs) {\n      this.setState({\n        titleInIpfs: certificate.titleInIpfs\n      });\n      return;\n    }\n    let title;\n    try {\n      title = await getTextOnIpfs(certificate.title);\n    } catch(err) {\n      console.error(err);\n      this.setState({\n        titleInIpfs: \"\",\n      });\n      return;\n    }\n    this.setState({\n      titleInIpfs: title,\n    });\n  }\n  async loadDescription() {\n    if (this.state.index < 0 || this.props.certificates.length <= this.state.index) {\n      return;\n    }\n    const certificate = this.state.certificates[this.state.index];\n    if (certificate.descriptionInIpfs) {\n      this.setState({\n        descriptionInIpfs: certificate.descriptionInIpfs,\n      });\n      return;\n    }\n    let description;\n    try {\n      description = await getTextOnIpfs(certificate.description);\n    } catch(err) {\n      console.error(err);\n      this.setState({\n        descriptionInIpfs: \"\",\n      });\n      return;\n    }\n    this.setState({\n      descriptionInIpfs: description,\n    });\n  }\n  async verifyCertificate() {\n    const client = this.props.client;\n    const certificate = this.state.certificates[this.state.index];\n    const verified = client.verifyCertificate(certificate, client.address);\n    this.setState({\n      verified: verified,\n    });\n  }\n  componentDidMount() {\n    this.loadDetail();\n  }\n  render() {\n    if (this.state.index < 0 || this.props.certificates.length <= this.state.index) {\n      return (\n        <NotFoundComponent />\n      );\n    }\n    const certificate = this.props.certificates[this.state.index];\n    return (\n      <div className=\"cert-view\">\n        <div className=\"cert-view-top\">\n          <button className=\"back\" onClick={this.back.bind(this)}>＜</button>\n          <img src={this.state.imageUrl} className=\"cert-view-image\" alt=\"GxCert\" />\n          <button className=\"next\" onClick={this.next.bind(this)}>＞</button>\n        </div>\n        <div className=\"cert-view-bottom\">\n          <button onClick={this.verifyCertificate.bind(this)} className=\"verify-button\">Verify</button>\n          <p className=\"cert-view-title\">\n            { this.state.verified ? \"✅ This certificate is valid.\" : \"\" }\n            { !this.state.verified && this.state.verified !== null ? \"❌ This certificate is invalid.\" : \"\" }<br/>\n            { this.state.titleInIpfs }<br/>\n            by <Link to={\"/users/\" + certificate.by }>{ !certificate.issueserName ? certificate.by.substr(0, 16) : certificate.issueserName }</Link> { !certificate.to ? \"\" : \"to \" + certificate.to.substr(0, 16) } at {\n              dateString(new Date(certificate.time * 1000))\n            }\n          </p>\n          <p className=\"cert-view-description\">\n            { this.state.descriptionInIpfs }\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  CertViewComponent\n}\n","import React from \"react\";\nimport { getImageOnIpfs } from \"../image-upload\";\nimport \"./User.css\";\nimport { MyCertListComponent } from \"./CertList\";\nimport NotFoundComponent from \"./404\";\n\nclass UserComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    const address = this.props.match.params.id;\n    this.props.fetchProfile(address);\n    this.props.getCertificates(address);\n  }\n  render() {\n    if (this.props.isNotFound) {\n      return (\n        <NotFoundComponent />\n      );\n    }\n    console.log(this.props);\n    const address = this.props.match.params.id;\n    return (\n      <div className=\"user\">\n        <img src={this.props.imageUrl} className=\"user-icon\" />\n        <h2 className=\"user-name\">\n          { this.props.name }\n        </h2>\n        <MyCertListComponent\n          isLoading={this.props.isLoading}\n          certificates={this.props.certificates}\n          certificatesIIssuesed={this.props.certificatesIIssuesed}\n          getInfoOfCertificates={this.props.getInfoOfCertificates}\n          getInfoOfCertificatesIIssuesed={this.props.getInfoOfCertificatesIIssuesed}\n          getCertificates={this.props.getCertificates}\n          getCertificatesIIssuesed={this.props.getCertificatesIIssuesed}\n          changeTabToIssueser={() => {\n            return this.props.changeTabToIssueser(address);\n          }}\n          changeTabToMyCertificates={this.props.changeTabToMyCertificates}\n          tab={this.props.tab}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserComponent;\n","import \"./App.css\";\nimport React from \"react\";\nimport { getGoogleUid } from \"./util\";\nimport CertClient, {clientWithoutAccount} from \"./client\";\nimport Login from \"./views/Login\";\nimport { IssueComponent } from \"./views/Issue\";\nimport { SettingComponent } from \"./views/Setting\";\nimport { BrowserRouter as Router, Route, Link, Switch, withRouter } from \"react-router-dom\";\nimport { MyPageComponent } from \"./views/MyPage\";\nimport { CertViewComponent } from \"./views/CertView\";\nimport UserComponent from \"./views/User\";\nimport BsModal from \"./views/components/BsModal\";\n\n\nconst UI = {\n  byId: function(id) {\n    return document.getElementById(id);\n  },\n  showErrorMessage: function(message) {\n    console.error(message);\n  },\n  showMessage: function(message) {\n    console.log(message);\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.myPageRef = React.createRef();\n    this.state = {\n      myPageIsLoading: true,\n      issuePageIsLoading: false,\n      certificates: [],\n      message: null,\n    }\n  }\n  closeModal() {\n    this.setState({\n      issuePageIsLoading: false,\n      message: null,\n    });\n  }\n  render() {\n    const that = this;\n    console.log(that.props);\n    const modalIsShow = this.props.state.isLoading || this.props.state.message !== null || this.props.state.errorMessage !== null;\n    const isLoading = this.props.state.isLoading;\n    const profile = this.props.state.myProfile;\n    const client = this.props.state.client;\n    let name = \"\";\n    if (client !== null && client.profile !== null) {\n      name = client.profile.name;\n    }\n    let icon = \"\";\n    if (profile) {\n      icon = profile.icon;\n    }\n    const login = (\n      <Login onClick={this.props.loginWithGoogle} />\n    );\n    const main = (\n        <div className=\"main\">\n          <header>\n          <h2 className=\"brand-logo\"><a href=\"/\">GxCert</a></h2>\n          <Link to=\"/issue\" className=\"header-issue-button header-button\">Issue</Link>\n          <Link to=\"/\" className=\"header-show-button header-button\">{client !== null ? client.address.substr(0, 6) + \"...\" : \"Profile\" }</Link>\n          </header>\n          <div className=\"main\">\n            <Switch>\n              <Route exact path=\"/\" render={ () => <MyPageComponent \n                address={client.address} \n                isLoading={that.props.state.myPageIsLoading} \n                certificates={that.props.state.certificates} \n                certificatesIIssuesed={that.props.state.certificatesIIssuesed}\n                icon={icon} \n                getCertificates={that.props.getCertificates} \n                getCertificatesIIssuesed={that.props.getCertificatesIIssuesed} \n                exportAccount={that.props.exportAccount}\n                onCopyId={that.props.onCopyId}\n                getInfoOfCertificates={that.props.getInfoOfCertificates}\n                getInfoOfCertificatesIIssuesed={that.props.getInfoOfCertificatesIIssuesed}\n                changeTabToIssueser={that.props.changeTabToIssueser}\n                changeTabToMyCertificates={that.props.changeTabToMyCertificates}\n                tab={that.props.state.tabInMyPage}\n                logout={that.props.logout}\n              /> } />\n              <Route exact path=\"/issue\" render={ () => <IssueComponent \n                onClickIssueButton={this.props.issue} \n                onChangeCertificateImage={this.props.onChangeCertificateImage} \n                onChangeIssueTo={this.props.onChangeIssueTo} \n                onChangeTitle={this.props.onChangeTitle}\n                onChangeDescription={this.props.onChangeDescription}\n              /> } />\n              <Route exact path=\"/user\" render={ () => <SettingComponent \n                onClickUpdateButton={this.props.updateUserSetting} \n                onChangeName={this.props.onChangeName} \n                onChangeIcon={this.props.onChangeIcon} \n                name={name}\n              /> } />\n              <Route exact path=\"/users/:id\" render={ (routeProps) => <UserComponent\n                { ...routeProps }\n                profile={that.props.state.profileInUserPage}\n                fetchProfile={that.props.fetchProfileInUserPage}\n                imageUrl={that.props.state.iconInUserPage}\n                name={that.props.state.nameInUserPage}\n                isLoading={that.props.state.userPageIsLoading}\n                certificates={that.props.state.certificatesInUserPage}\n                certificatesIIssuesed={that.props.state.certificatesIIssuesedInUserPage}\n                getCertificates={that.props.getCertificatesInUserPage}\n                getCertificatesIIssuesed={that.props.getCertificatesIIssuesedInUserPage}\n                getInfoOfCertificates={that.props.getInfoOfCertificatesInUserPage}\n                getInfoOfCertificatesIIssuesed={that.props.getInfoOfCertificatesIIssuesedInUserPage}\n                changeTabToIssueser={that.props.changeTabInUserPageToIssueser}\n                changeTabToMyCertificates={that.props.changeTabInUserPageToMyCertificates}\n                tab={that.props.state.tabInUserPage}\n                isNotFound={that.props.state.userIsNotFound}\n              /> } />\n              <Route exact path=\"/issuesed/:index\" render={ (routeProps) => <CertViewComponent {...routeProps}\n                certificates={that.props.state.certificatesIIssuesed}\n                client={clientWithoutAccount}\n              />} />\n              <Route exact path=\"/certs/:index\" render={ (routeProps) => <CertViewComponent {...routeProps} \n                certificates={that.props.state.certificates} \n                client={clientWithoutAccount}\n              />} />\n            </Switch>\n          </div>\n          <BsModal show={modalIsShow} closeModal={this.props.closeModal} isLoading={isLoading} message={this.props.state.message} errorMessage={this.props.state.errorMessage}/>\n        </div>\n    );\n    return (\n        <div className=\"App\">\n          { !this.props.location.pathname.startsWith(\"/users/\") && client === null ? login : main }\n          <BsModal show={modalIsShow} closeModal={this.props.closeModal} isLoading={isLoading} message={this.props.state.message} errorMessage={this.props.state.errorMessage}/>\n        </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { getTextOnIpfs, getImageOnIpfs } from \"../image-upload\";\nasync function getCertificates(client, address, update, fail) {\n  let certificates;\n  try {\n    certificates = await client.getCertificates(address);\n  } catch(err) {\n    fail(err);\n    return;\n  }\n  update(certificates);\n  for (const certificate of certificates) {\n    getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n      certificate.imageUrl = imageUrl;\n      update(certificates);\n    }).catch(err => {\n      console.error(err);\n    });\n    getTextOnIpfs(certificate.title).then(title => {\n      certificate.titleInIpfs = title;\n      update(certificates);\n    }).catch(err => {\n      console.error(err);\n    });\n    client.getProfile(certificate.by).then(byProfile => {\n      certificate.byProfile = byProfile;\n    }).catch(err => {\n      console.error(err);\n    });\n    if (certificate.to) {\n      client.getProfile(certificate.to).then(toProfile => {\n        certificate.toProfile = toProfile;\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\nasync function getCertificatesIIssuesed(client, address, update, fail) {\n  let certificates;\n  try {\n    certificates = await client.getCertificatesIIssuesed(address);\n  } catch(err) {\n    fail(err);\n    return;\n  }\n  update(certificates);\n  for (const certificate of certificates) {\n    getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n      certificate.imageUrl = imageUrl;\n      update(certificates);\n    }).catch(err => {\n      console.error(err);\n    });\n    getTextOnIpfs(certificate.title).then(title => {\n      certificate.titleInIpfs = title;\n      update(certificates);\n    }).catch(err => {\n      console.error(err);\n    });\n    client.getProfile(certificate.by).then(byProfile => {\n      certificate.byProfile = byProfile;\n      update(certificates);\n    }).catch(err => {\n      console.error(err);\n    });\n    if (certificate.to) {\n      client.getProfile(certificate.to).then(toProfile => {\n        certificate.toProfile = toProfile;\n        update(certificates);\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nexport {\n  getCertificates,\n  getCertificatesIIssuesed,\n}\n","import CertClient, { getClientFromState, clientWithoutAccount } from \"../client\"\nimport { getTextOnIpfs, postText, fileInputToDataURL, createBlobFromImageDataURI, postCertificate, getImageOnIpfs } from \"../image-upload\";\nimport { getGoogleUid } from \"../util\";\nimport { getCertificates as getCertificatesWithIpfs, getCertificatesIIssuesed as getCertificatesIIssuesedWithIpfs } from \"../util/ClientWithIpfs\";\n\nconst getMyProfile = () => async (dispatch, getState) => {\n  const client = getState().state.client;\n  let profile;\n  try {\n    profile = await client.getProfile(client.address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const ipfsHashOfImage = profile.icon;\n  let icon = null;\n  if (ipfsHashOfImage) {\n    try {\n      icon = await getImageOnIpfs(ipfsHashOfImage);\n    } catch(err) {\n      icon = null;\n    }\n  }\n  profile.icon = icon;\n  const ipfsHashOfName = profile.name;\n  let name = null;\n  if (ipfsHashOfName) {\n    try {\n      name = await getTextOnIpfs(ipfsHashOfName);\n    } catch(err) {\n      name = null;\n    }\n  }\n  profile.nameInIpfs = name;\n  dispatch({\n    type: \"GET_MYPROFILE\",\n    payload: profile,\n  });\n}\nconst getCertificates = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES\",\n    payload: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  getCertificatesWithIpfs(client, client.address, (payload) => {\n    dispatch({\n      type: \"GET_CERTIFICATES\",\n      payload,\n    });\n  }, (err) => {\n    dispatch({\n      type: \"GET_CERTIFICATES\",\n      payload: null,\n      error: err,\n    });\n  });\n}\n\nconst getCertificatesInUserPage = (address) => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES_IN_USER_PAGE\",\n    payload: null,\n  });\n  const client = clientWithoutAccount;\n  getCertificatesWithIpfs(client, address, (payload) => {\n    dispatch({\n      type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n      payload,\n    });\n  }, (err) => {\n    dispatch({\n      type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n      payload: [],\n      error: err,\n    });\n  });\n}\nconst getCertificatesIIssuesed = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES_I_ISSUESED\",\n    payload: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  getCertificatesIIssuesedWithIpfs(client, client.address, (payload) => {\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED\",\n      payload,\n    });\n  }, (err) => {\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED\",\n      payload: null,\n      error: err,\n    });\n  });\n}\nconst getCertificatesIIssuesedInUserPage = (address) => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n    payload: null,\n  });\n  const client = clientWithoutAccount;\n  getCertificatesIIssuesedWithIpfs(client, address, (payload) => {\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n      payload: payload,\n    });\n  }, (err) => {\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n      payload: [],\n      error: err,\n    });\n  });\n}\nconst issue = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CLICK_ISSUE_BUTTON\",\n    payload: null,\n    error: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  const state = getState().state;\n  const issueTo = state.issueTo;\n  const image = state.certificateImage;\n  const title = state.title.trim();\n  const description = state.description.trim();\n  if (issueTo === null || image === null || title === \"\") {\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: new Error(\"The certificate image or address is not set.\"),\n    });\n    return;\n  }\n  let ipfsHashOfImage = null;\n  try {\n    const imageData = await fileInputToDataURL(image);\n    const blob = createBlobFromImageDataURI(imageData);\n    ipfsHashOfImage = await postCertificate(blob);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  let ipfsHashOfTitle = null;\n  try {\n    ipfsHashOfTitle = await postText(title);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  let ipfsHashOfDescription = null;\n  try {\n    ipfsHashOfDescription = await postText(description);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  try {\n    const certificate = client.createCertificateObject(ipfsHashOfTitle, ipfsHashOfDescription, ipfsHashOfImage, issueTo);\n    await client.issueCertificate(certificate, issueTo);\n  } catch(err) {\n    console.log(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  dispatch({\n    type: \"ISSUE\",\n    payload: null,\n    error: null,\n  });\n}\n\nconst onChangeCertificateImage = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_CERTIFICATE_IMAGE\",\n    payload: evt.target.files[0],\n  });\n}\n\nconst onChangeIssueTo = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_ISSUE_TO\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeDescription = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_DESCRIPTION\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeName = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeIcon = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_ICON\",\n    payload: evt.target.files[0],\n  });\n}\nconst onChangeTitle = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_TITLE\",\n    payload: evt.target.value,\n  });\n}\n\nconst closeModal = () => async (dispatch) => {\n  dispatch({\n    type: \"CLOSE_MODAL\",\n    payload: null,\n  });\n}\n\nconst updateUserSetting = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_UPDATE_USER_SETTING\",\n    payload: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  const state = getState().state;\n  if ((!state.name || state.name.trim() === \"\") && (!state.icon)) {\n    dispatch({\n      type: \"UPDATE_USER_SETTING\",\n      payload: null,\n      error: new Error(\"The input fields are empty.\"),\n    });\n    return;\n  }\n  if (state.name !== null && state.name.trim() !== \"\") {\n    let name = state.name.trim();\n    try {\n      name = await postText(name);\n    } catch(err) {\n      dispatch({\n        type: \"UPDATE_USER_SETTING\",\n        payload: null,\n        error: err,\n      });\n      return;\n    }\n    try {\n      await client.registerName(name);\n    } catch(err) {\n      dispatch({\n        type: \"UPDATE_USER_SETTING\",\n        payload: null,\n        error: err,\n      });\n      return;\n    }\n  }\n  if (state.icon !== null) {\n    let ipfsHashOfImage = null;\n    try {\n      const imageData = await fileInputToDataURL(state.icon);\n      const blob = createBlobFromImageDataURI(imageData);\n      ipfsHashOfImage = await postCertificate(blob);\n      await client.registerIcon(ipfsHashOfImage);\n    } catch(err) {\n      dispatch({\n        type: \"UPDATE_USER_SETTING\",\n        payload: null,\n        error: err,\n      });\n      return;\n    }\n  }\n  dispatch({\n    type: \"UPDATE_USER_SETTING\",\n    payload: null,\n    error: null,\n  });\n}\n\nconst onCopyId = () => async (dispatch) => {\n  dispatch({\n    type: \"ON_COPY_ID\",\n    payload: null,\n  });\n}\n\nconst changeTabToIssueser = () => async (dispatch) => {\n  console.log(\"change to issueser\");\n  dispatch({\n    type: \"CHANGE_TAB_TO_ISSUESER\",\n    payload: null,\n  });\n}\n\nconst changeTabToMyCertificates = () => async (dispatch) => {\n  dispatch({\n    type: \"CHANGE_TAB_TO_MY_CERTIFICATES\",\n    payload: null,\n  });\n}\n\nconst fetchProfileInUserPage = (id) => async (dispatch, getState) => {\n  const client = clientWithoutAccount;\n  if (!client) {\n    return;\n  }\n  let profile;\n  try {\n    profile = await client.getProfile(id);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"FETCH_PROFILE_IN_USER_PAGE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  const ipfsHashOfName = profile.name;\n  let name = null;\n  if (ipfsHashOfName) {\n    try {\n      name = await getTextOnIpfs(ipfsHashOfName);\n    } catch(err) {\n      name = null;\n    }\n  }\n  profile.nameInIpfs = name;\n  dispatch({\n    type: \"FETCH_PROFILE_IN_USER_PAGE\",\n    payload: profile,\n  });\n  const icon = profile.icon;\n  if (!icon) {\n    return;\n  }\n  const imageUrl = await getImageOnIpfs(icon);\n  dispatch({\n    type: \"FETCH_ICON_IN_USER_PAGE\",\n    payload: imageUrl,\n  });\n}\n\nconst changeTabInUserPageToIssueser = () => async (dispatch) => {\n  dispatch({\n    type: \"CHANGE_TAB_IN_USER_PAGE_TO_ISSUESER\",\n    payload: null,\n  });\n}\nconst changeTabInUserPageToMyCertificates = () => async (dispatch) => {\n  dispatch({\n    type: \"CHANGE_TAB_IN_USER_PAGE_TO_MY_CERTIFICATES\",\n    payload: null,\n  });\n}\n\nconst getInfoOfCertificates = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificates;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.titleInIpfs && certificate.title) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs && certificate.description) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst getInfoOfCertificatesIIssuesed = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificatesIIssuesed;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.titleInIpfs && certificate.title) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs && certificate.description) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst getInfoOfCertificatesInUserPage = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificatesInUserPage;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.titleInIpfs) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst getInfoOfCertificatesIIssuesedInUserPage = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificatesIIssuesedInUserPage;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      });\n    }\n    if (!certificate.titleInIpfs) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst logout = () => async (dispatch) => {\n  dispatch({\n    type: \"LOGOUT\",\n    payload: null,\n  });\n}\n\nconst exportAccount = (evt) => async (dispatch, getState) => {\n  const client = getClientFromState(getState().state.client);\n  const uid = client.uid;\n  const json = JSON.stringify({\n    uid,\n  })\n  const blob = new Blob([json], {type: \"application/json\"});\n  const a = evt.target;\n  a.download = \"account.json\";\n  a.href = window.URL.createObjectURL(blob);\n}\n\nconst loginWithGoogle = () => async (dispatch) => {\n  const uid = await getGoogleUid();\n  const client = CertClient(uid + \"1\");\n  dispatch({\n    type: \"LOADING\",\n    payload: null,\n  });\n  await client.init();\n  console.log(client.address); \n  dispatch({\n    type: \"INITIALIZE_CLIENT\",\n    payload: client,\n  });\n}\n\nexport {\n  getMyProfile,\n  getCertificates,\n  getCertificatesInUserPage,\n  getCertificatesIIssuesed,\n  getCertificatesIIssuesedInUserPage,\n  issue,\n  onChangeCertificateImage,\n  onChangeIssueTo,\n  onChangeName,\n  onChangeIcon,\n  onChangeDescription,\n  updateUserSetting,\n  exportAccount,\n  onChangeTitle,\n  closeModal,\n  onCopyId,\n  changeTabToIssueser,\n  changeTabToMyCertificates,\n  fetchProfileInUserPage,\n  changeTabInUserPageToIssueser,\n  changeTabInUserPageToMyCertificates,\n  getInfoOfCertificates,\n  getInfoOfCertificatesInUserPage,\n  getInfoOfCertificatesIIssuesed,\n  getInfoOfCertificatesIIssuesedInUserPage,\n  logout,\n  loginWithGoogle,\n}\n","import CertClient from \"./client\";\n\nconst initialState = {\n  uid: null,\n  isLoading: false,\n  certificateImage: null,\n  issueTo: null,\n  certificates: [],\n  certificatesIIssuesed: [],\n  myPageIsLoading: false,\n  myProfile: null,\n  name: \"\",\n  icon: null,\n  title: \"\",\n  errorMessage: null,\n  message: null,\n  tabInMyPage: 0,\n  iconInUserPage: null,\n  nameInUserPage: null,\n  profileInUserPage: null,\n  userPageIsLoading: false,\n  certificatesInUserPage: [],\n  certificatesIIssuesedInUserPage: [],\n  tabInUserPage: 0,\n  client: null,\n  address: null,\n  description: \"\",\n  userIsNotFound: false,\n}\n\nexport default initialState;\n","import { combineReducers, createStore, compose, applyMiddleware } from \"redux\";\nimport Reducer from \"./reducer\";\nimport thunk from \"redux-thunk\";\nimport { persistReducer, persistStore } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport initialState from \"./initialState\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, Reducer);\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers({\n    state: persistedReducer,\n  }),\n  initialState,\n  storeEnhancers(applyMiddleware(thunk))\n);\n\nexport const persistor = persistStore(store);\nexport default store;\n","\nimport initialState from \"./initialState\";\n\n\nexport default function Reducer(state=initialState, action) {\n  switch(action.type) {\n    case \"ON_CLICK_ISSUE_BUTTON\":\n      return Object.assign({}, state, {\n        isLoading: true,\n        message: \"Issuesing the certificate...\",\n      }); \n    case \"START_UPDATE_USER_SETTING\":\n      return Object.assign({}, state, {\n        isLoading: true,\n        message: \"Updating your setting...\",\n      }); \n    case \"UPDATE_USER_SETTING\":\n      if ((!state.name || state.name.trim() === \"\") && (!state.icon)) {\n        return Object.assign({}, state, {\n          isLoading: false,\n          message: null,\n          errorMessage: \"The input fields are empty.\",\n        });\n      }\n      if (action.error) {\n        return Object.assign({}, state, {\n          isLoading: false,\n          message: null,\n          errorMessage: \"Failed to update your setting.\",\n        });\n      }\n      return Object.assign({}, state, {\n        isLoading: false,\n        message: \"Successfully updated your setting.\",\n      }); \n    case \"ISSUE\":\n      if (state.issueTo === null || state.certificateImage === null || state.title.trim() === \"\") {\n        return Object.assign({}, state, {\n          isLoading: false,\n          message: null,\n          errorMessage: \"Fill the input fields.\",\n        });\n        return;\n      }\n      if (action.error) {\n        return Object.assign({}, state, {\n          isLoading: false,\n          message: null,\n          errorMessage: \"Failed to issue the certificate.\",\n        });\n      }\n      return Object.assign({}, state, {\n        isLoading: false,\n        message: \"Successfully issuesed the certificate.\",\n      });\n    case \"GET_CERTIFICATES\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          myPageIsLoading: false,\n          errorMessage: \"Failed to fetch your certificates.\",\n        });\n      }\n      return Object.assign({}, state, {\n        certificates: action.payload,\n        myPageIsLoading: false,\n      });\n    case \"GET_CERTIFICATES_I_ISSUESED\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          myPageIsLoading: false,\n          errorMessage: \"Failed to fetch the certificates that you issuesed.\",\n        });\n      }\n      return Object.assign({}, state, {\n        certificatesIIssuesed: action.payload,\n        myPageIsLoading: false,\n      });\n    case \"GET_CERTIFICATES_IN_USER_PAGE\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          certificatesInUserPage: [],\n          userPageIsLoading: false,\n        });\n      }\n      return Object.assign({}, state, {\n        certificatesInUserPage: action.payload,\n        userPageIsLoading: false,\n      });\n    case \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          certificatesIIssuesedInUserPage: [],\n          userPageIsLoading: false,\n        });\n      }\n      return Object.assign({}, state, {\n        certificatesIIssuesedInUserPage: action.payload,\n        userPageIsLoading: false,\n      });\n    case \"ON_CHANGE_CERTIFICATE_IMAGE\":\n      return Object.assign({}, state, {\n        certificateImage: action.payload,\n      });\n    case \"ON_CHANGE_ISSUE_TO\":\n      return Object.assign({}, state, {\n        issueTo: action.payload,\n      });\n    case \"ON_CHANGE_TITLE\":\n      return Object.assign({}, state, {\n        title: action.payload,\n      });\n    case \"START_GETTING_CERTIFICATES\":\n      return Object.assign({}, state, {\n        myPageIsLoading: true,\n        tabInMyPage: 0,\n      });\n    case \"START_GETTING_CERTIFICATES_I_ISSUESED\":\n      return Object.assign({}, state, {\n        myPageIsLoading: true,\n        tabInMyPage: 1,\n      });\n    case \"START_GETTING_CERTIFICATES_IN_USER_PAGE\":\n      return Object.assign({}, state, {\n        userPageIsLoading: true,\n        tabInUserPage: 0,\n      });\n    case \"START_GETTING_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\":\n      return Object.assign({}, state, {\n        userPageIsLoading: true,\n        tabInUserPage: 1,\n      });\n    case \"GET_MYPROFILE\":\n      return Object.assign({}, state, {\n        myProfile: action.payload,\n      });\n    case \"ON_CHANGE_NAME\":\n      return Object.assign({}, state, {\n        name: action.payload,\n      });\n    case \"ON_CHANGE_DESCRIPTION\":\n      return Object.assign({}, state, {\n        description: action.payload,\n      });\n    case \"ON_CHANGE_ICON\":\n      return Object.assign({}, state, {\n        icon: action.payload,\n      });\n    case \"CLOSE_MODAL\":\n      return Object.assign({}, state, {\n        message: null,\n        errorMessage: null,\n      });\n    case \"ON_COPY_ID\":\n      return Object.assign({}, state, {\n        message: \"Successfully copied your ID\",\n      });\n    case \"CHANGE_TAB_TO_ISSUESER\":\n      return Object.assign({}, state, {\n        tabInMyPage: 1,\n      });\n    case \"CHANGE_TAB_TO_MY_CERTIFICATES\":\n      return Object.assign({}, state, {\n        tabInMyPage: 0,\n      });\n    case \"FETCH_PROFILE_IN_USER_PAGE\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          profileInUserPage: null,\n          nameInUserPage: null,\n          userIsNotFound: true,\n        });\n      }\n      return Object.assign({}, state, {\n        profileInUserPage: action.payload,\n        nameInUserPage: action.payload.name,\n        userIsNotFound: false,\n      });\n    case \"FETCH_ICON_IN_USER_PAGE\":\n      return Object.assign({}, state, {\n        iconInUserPage: action.payload,\n      });\n    case \"LOGOUT\":\n      return initialState;\n    case \"INITIALIZE_CLIENT\":\n      return Object.assign({}, state, {\n        client: action.payload,\n        isLoading: false,\n      });\n    case \"LOADING\":\n      return Object.assign({}, state, {\n        isLoading: true,\n      });\n    default:\n      return state;\n  }\n}\n\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { \n  loginWithGoogle, \n  logout, \n  getInfoOfCertificatesIIssuesed, \n  getInfoOfCertificatesIIssuesedInUserPage, \n  getInfoOfCertificates, \n  getInfoOfCertificatesInUserPage, \n  getCertificatesInUserPage, \n  getCertificatesIIssuesedInUserPage, \n  changeTabInUserPageToIssueser, \n  changeTabInUserPageToMyCertificates, \n  fetchProfileInUserPage, \n  changeTabToIssueser, \n  changeTabToMyCertificates, \n  onCopyId, \n  exportAccount, \n  closeModal, \n  getMyProfile, \n  getCertificates, \n  getCertificatesIIssuesed, \n  issue, \n  onChangeIssueTo, \n  onChangeCertificateImage, \n  onChangeName, \n  onChangeIcon, \n  onChangeDescription,\n  updateUserSetting, \n  onChangeTitle \n} from \"./actions\";\nimport { connect, Provider } from \"react-redux\";\nimport store, { persistor } from \"./store\";\nimport { withRouter, BrowserRouter as Router } from \"react-router-dom\";\nimport CertClient from \"./client\"\n\nfunction mapStateToProps(state, props) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    getCertificates: () => {\n      dispatch(getCertificates());\n    },\n    getCertificatesIIssuesed: () => {\n      dispatch(getCertificatesIIssuesed());\n    },\n    issue: () => {\n      dispatch(issue());\n    },\n    onChangeIssueTo: (evt) => {\n      dispatch(onChangeIssueTo(evt));\n    },\n    onChangeCertificateImage: (evt) => {\n      dispatch(onChangeCertificateImage(evt));\n    },\n    getMyProfile: () => {\n      dispatch(getMyProfile());\n    },\n    onChangeName: (evt) => {\n      dispatch(onChangeName(evt));\n    },\n    onChangeIcon: (evt) => {\n      dispatch(onChangeIcon(evt));\n    },\n    onChangeTitle: (evt) => {\n      dispatch(onChangeTitle(evt));\n    },\n    onChangeDescription: (evt) => {\n      dispatch(onChangeDescription(evt));\n    },\n    updateUserSetting: () => {\n      dispatch(updateUserSetting());\n    },\n    exportAccount: (evt) => {\n      dispatch(exportAccount(evt));\n    },\n    closeModal: () => {\n      dispatch(closeModal());\n    },\n    onCopyId: () => {\n      dispatch(onCopyId());\n    },\n    getCertificatesInUserPage: (address) => {\n      dispatch(getCertificatesInUserPage(address));\n    },\n    getCertificatesIIssuesedInUserPage: (address) => {\n      dispatch(getCertificatesIIssuesedInUserPage(address));\n    },\n    changeTabToIssueser: () => {\n      dispatch(getCertificatesIIssuesed());\n    },\n    changeTabToMyCertificates: () => {\n      dispatch(getCertificates());\n    },\n    changeTabInUserPageToIssueser: (address) => {\n      dispatch(getCertificatesIIssuesedInUserPage(address));\n    },\n    changeTabInUserPageToMyCertificates: () => {\n      dispatch(changeTabInUserPageToMyCertificates());\n    },\n    fetchProfileInUserPage: (address) => {\n      dispatch(fetchProfileInUserPage(address));\n    },\n    getInfoOfCertificates: () => {\n      dispatch(getInfoOfCertificates());\n    },\n    getInfoOfCertificatesIIssuesed: () => {\n      dispatch(getInfoOfCertificatesIIssuesed());\n    },\n    getInfoOfCertificatesIIssuesedInUserPage: () => {\n      dispatch(getInfoOfCertificatesIIssuesedInUserPage());\n    },\n    getInfoOfCertificatesInUserPage: () => {\n      dispatch(getInfoOfCertificatesInUserPage());\n    },\n    logout: () => {\n      dispatch(logout());\n    },\n    loginWithGoogle: () => {\n      dispatch(loginWithGoogle());\n    },\n  }\n}\n\nconst RxApp = connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Router>\n        <RxApp />\n      </Router>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}