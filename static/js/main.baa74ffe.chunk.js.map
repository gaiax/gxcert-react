{"version":3,"sources":["util/Firebase.js","util/Google.js","util/index.js","client.js","views/Login.js","views/Issue.js","views/Setting.js","views/MyInfo.js","views/components/Loading.js","views/components/BsModal.js","image-upload/ipfs.js","image-upload/image.js","views/CertCell.js","views/CertList.js","views/MyPage.js","views/404.js","views/CertView.js","views/User.js","views/components/BsExportModal.js","App.js","reportWebVitals.js","actions/index.js","initialState.js","store.js","reducer.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","auth","GoogleAuthProvider","getGoogleUid","a","signInWithPopup","result","user","uid","copyText","text","copyFrom","document","createElement","textContent","bodyElm","getElementsByTagName","appendChild","select","execCommand","removeChild","dateString","date","getFullYear","getMonth","getDate","clientWithoutAccount","Client","getClientFromState","client","address","rsaKeyPair","privKey","cryptico","generateRSAKey","pubKey","publicKeyString","getKeyPair","profile","cache","seed","CertClient","Login","className","onClick","this","props","React","Component","IssueComponent","type","id","onChange","onChangeCertificateImage","onChangeTitle","onChangeDescription","onChangeIssueTo","onClickIssueButton","SettingComponent","onClickUpdateButton","onChangeName","defaultValue","name","onChangeIcon","MyInfoComponent","onCopyId","nameInIpfs","alt","src","imageUrl","href","copyId","bind","to","openExportModal","logout","CommunicationLoading","style","marginLeft","marginRight","width","BsModal","modal","isLoading","Modal","show","animation","Body","message","errorMessage","Footer","Button","variant","closeModal","ipfs","IpfsHttpClient","host","port","protocol","postCertificate","blob","add","response","path","Error","postText","createImageUrlFromUint8Array","arr","Blob","window","URL","webkitURL","createObjectURL","concatBuffer","buffer1","buffer2","tmp","Uint8Array","byteLength","set","buffer","getImageOnIpfs","ipfsHash","async","get","data","console","log","content","ArrayBuffer","url","uintToString","array","out","i","len","c","char2","char3","length","String","fromCharCode","getTextOnIpfs","require","fileInputToDataURL","file","Promise","resolve","reject","reader","FileReader","addEventListener","readAsDataURL","createBlobFromImageDataURI","uri","byteString","atob","split","mimeType","match","l","charCodeAt","CertCellComponent","certificate","title","titleInIpfs","substr","byProfile","toProfile","Date","time","CertListComponent","getInfoOfCertificates","certificates","map","index","MyCertListComponent","changeTabToMyCertificates","getCertificates","changeTabToIssueser","getCertificatesIIssuesed","tab","certificatesIIssuesed","getInfoOfCertificatesIIssuesed","MyPageComponent","exportAccount","NotFoundComponent","CertViewComponent","parseInt","params","fromUserPage","state","verified","setState","loadDetail","loadImage","loadTitle","loadDescription","error","descriptionInIpfs","description","verifyCertificate","back","next","by","issueserName","UserComponent","fetchProfile","isNotFound","BsExportModal","exportFile","copyAccount","closeExportModal","App","myPageRef","createRef","myPageIsLoading","issuePageIsLoading","that","modalIsShow","myProfile","icon","login","loginWithGoogle","exportModal","exportModalIsShown","main","exact","render","tabInMyPage","issue","updateUserSetting","routeProps","profileInUserPage","fetchProfileInUserPage","iconInUserPage","nameInUserPage","userPageIsLoading","certificatesInUserPage","certificatesIIssuesedInUserPage","getCertificatesInUserPage","getCertificatesIIssuesedInUserPage","getInfoOfCertificatesInUserPage","getInfoOfCertificatesIIssuesedInUserPage","changeTabInUserPageToIssueser","changeTabInUserPageToMyCertificates","tabInUserPage","userIsNotFound","location","pathname","startsWith","withRouter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","dispatch","getState","payload","catch","err","initialState","certificateImage","issueTo","persistConfig","key","storage","persistedReducer","persistReducer","action","Object","assign","trim","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","persistor","persistStore","RxApp","connect","image","ipfsHashOfImage","imageData","ipfsHashOfTitle","ipfsHashOfDescription","createCertificateObject","issueCertificate","evt","target","value","files","getMyProfile","getProfile","registerName","registerIcon","json","JSON","stringify","download","init","ReactDOM","loading","getElementById"],"mappings":"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","file":"static/js/main.baa74ffe.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBVg-6cdqXuAnS2gECbjHlbJd_Lt8qyQWw\",\n  authDomain: \"gxcert-21233.firebaseapp.com\",\n  projectId: \"gxcert-21233\",\n  storageBucket: \"gxcert-21233.appspot.com\",\n  messagingSenderId: \"500830367528\",\n  appId: \"1:500830367528:web:dfdb8fe5fa6b362d8faa1d\",\n  measurementId: \"G-ZGY6X71Q2R\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n//firebase.analytics();\n\nexport default firebase;\n","import firebase from \"./Firebase\";\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nasync function getGoogleUid() {\n  const result = await firebase.auth().signInWithPopup(provider);\n  return result.user.uid;\n}\n\nexport { getGoogleUid };\n","import { getGoogleUid } from \"./Google\";\n\nfunction copyText(text) {\n  const copyFrom = document.createElement(\"textarea\");\n  copyFrom.textContent = text;\n  const bodyElm = document.getElementsByTagName(\"body\")[0];\n  bodyElm.appendChild(copyFrom);\n  copyFrom.select();\n  document.execCommand('copy');\n  bodyElm.removeChild(copyFrom);\n}\n\nfunction getUrlQueries() {\n  let queryStr = window.location.search.slice(1);\n  let queries = {};\n  if (!queryStr) {\n    return queries;\n  }\n  queryStr.split(\"&\").forEach(function (queryStr) {\n    var queryArr = queryStr.split(\"=\");\n    queries[queryArr[0]] = queryArr[1];\n  });\n  return queries;\n}\nfunction dateString(date) {\n  return (\n    date.getFullYear() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getDate()\n  );\n}\n\n\nexport {\n  copyText,\n  getUrlQueries,\n  getGoogleUid,\n  dateString,\n}\n\n","import * as Client from \"gxcert-iota\";\nimport cryptico from \"cryptico\";\n\nconst clientWithoutAccount = new Client(\"https://nodes.devnet.iota.org\");\nfunction getKeyPair(uid) {\n  const privKey = cryptico.generateRSAKey(uid, 1024);\n  const pubKey = cryptico.publicKeyString(privKey);\n  return {\n    privKey,\n    pubKey,\n  }\n}\nfunction getClientFromState (client) {\n  const result = new Client(\"https://nodes.devnet.iota.org\");\n  result.address = client.address;\n  result.rsaKeyPair = getKeyPair(client.uid);\n  result.profile = client.profile;\n  result.cache = client.cache;\n  result.uid = client.uid;\n  result.seed = client.seed;\n  return result;\n}\n\nexport default function CertClient(uid) {\n  return new Client(\"https://nodes.devnet.iota.org\", uid);\n}\n\nexport {\n  getClientFromState,\n  clientWithoutAccount\n}\n\n","import React from \"react\";\nimport \"./Login.css\";\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div className=\"login-page\">\n        <button className=\"login-google\" onClick={this.props.onClick}>\n          Login with Google\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport \"./Issue.css\";\nimport \"./reset.css\";\n\n\nclass IssueComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"issue\">\n        <div className=\"issue-wrapper\">\n          <h2 className=\"issue-title\">Issue Certificate</h2>\n          <h5 className=\"issue-image-title issue-input-title\">Certificate Image</h5>\n          <input type=\"file\" id=\"issue-image\" className=\"issue-image issue-input\" onChange={this.props.onChangeCertificateImage} />\n          <h5 className=\"issue-to-title issue-input-title\">Title</h5>\n          <input type=\"text\" id=\"issue-title\" className=\"issue-input\" onChange={this.props.onChangeTitle} /><br/>\n          <h5 className=\"issue-to-description issue-input-title\">Description</h5>\n          <textarea id=\"issue-description\" className=\"issue-description issue-input\" onChange={this.props.onChangeDescription}></textarea><br/>\n          <h5 className=\"issue-to-title issue-input-title\">To</h5>\n          <input type=\"text\" id=\"issue-to\" className=\"issue-to issue-input\" onChange={this.props.onChangeIssueTo} /><br/>\n          <button className=\"issue-button\" id=\"issue-button\" onClick={this.props.onClickIssueButton}>Issue</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  IssueComponent,\n}\n","import React from \"react\";\nimport \"./Setting.css\";\n\nclass SettingComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickUpdateButton = props.onClickUpdateButton;\n  }\n  render () {\n    return (\n      <div className=\"setting\">\n        <div className=\"setting-wrapper\">\n          <h2 className=\"setting-title\">\n            User Settings\n          </h2>\n          <h5 className=\"setting-name-title setting-input-title\">Your Name</h5>\n          <input type=\"text\" id=\"setting-name\" className=\"setting-name setting-input\" onChange={this.props.onChangeName} defaultValue={this.props.name} />\n          <h5 className=\"setting-icon-title setting-input-title\">Icon</h5>\n          <input type=\"file\" id=\"setting-icon\" className=\"setting-icon setting-input\" onChange={this.props.onChangeIcon} />\n          <button className=\"setting-button\" id=\"setting-button\" onClick={this.props.onClickUpdateButton}>Update</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  SettingComponent\n}\n","import \"./MyInfo.css\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { copyText } from \"../util\";\n\nclass MyInfoComponent extends React.Component {\n  copyId() {\n    copyText(this.props.address);\n    this.props.onCopyId();\n  }\n  render() {\n    let name = \"\";\n    if (this.props.profile && this.props.profile.nameInIpfs) {\n      name = this.props.profile.nameInIpfs;\n    }\n    return (\n      <div className=\"myinfo\">\n        <img className=\"myinfo-image\" alt=\"GxCert icon\" src={this.props.profile.imageUrl} />\n        <div className=\"myinfo-right\">\n          <div className=\"myinfo-name\">\n            { name }\n          </div>\n          <div className=\"myinfo-address\">\n            { \"Your ID: \" + this.props.address }\n          </div>\n          <div className=\"myinfo-buttons\">\n            <a href=\"javascript:void(0)\" className=\"copy-button\" onClick={this.copyId.bind(this)}>Copy ID</a> | <Link className=\"myinfo-register\" to=\"/user\">Update your user info</Link> | <a href=\"javascript:void(0)\" className=\"export-button\" onClick={this.props.openExportModal}>Export Account</a> | <a href=\"javascript:void(0)\" className=\"logout-button\" onClick={this.props.logout}>Logout</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  MyInfoComponent\n}\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\n\nconst CommunicationLoading = () => (\n  <ReactLoading type=\"spin\" style={{marginLeft: \"auto\", marginRight: \"auto\", width: 150}} />\n);\n\nexport default CommunicationLoading;\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport CommunicationLoading from \"./Loading\";\nimport \"./BsModal.css\";\n\nexport default class BsModal extends React.Component {\n  render() {\n    let modal = null;\n    if (this.props.isLoading) {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            { this.props.message !== null ? (<p className=\"message\">{ this.props.message }</p>) : \"\" }\n            <CommunicationLoading />\n          </Modal.Body>\n        </Modal>\n      );\n    } else if (this.props.message !== null || this.props.errorMessage !== null) {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            <p className=\"message\">{ this.props.message }</p>\n            <p className=\"error-message\">{ this.props.errorMessage }</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={this.props.closeModal} >\n              Back\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )\n    }\n    return (\n      <div className=\"modal\">\n        { modal }\n      </div>\n    );\n  }\n}\n","import * as IpfsHttpClient from \"ipfs-http-client\";\nconst ipfs = IpfsHttpClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\nasync function postCertificate(blob) {\n  const response = await ipfs.add(blob);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the certificate to IPFS network.\");\n}\nasync function postText(text) {\n  const response = await ipfs.add(text);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the text to IPFS network.\");\n}\n\nfunction createImageUrlFromUint8Array(arr) {\n  const blob = new Blob([arr]);\n  const urlCreator = window.URL || window.webkitURL;\n  const imageUrl = urlCreator.createObjectURL(blob);\n  return imageUrl;\n}\nvar concatBuffer = function (buffer1, buffer2) {\n  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n};\n\nasync function getImageOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    const url = createImageUrlFromUint8Array(content);\n    return url;\n  }\n  return null;\n}\n\nfunction uintToString(array) {\n  var out, i, len, c;\n  var char2, char3;\n\n  out = \"\";\n  len = array.length;\n  i = 0;\n  while (i < len) {\n    c = array[i++];\n    switch (c >> 4)\n    {\n      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12: case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(((c & 0x0F) << 12) |\n                                   ((char2 & 0x3F) << 6) |\n                                   ((char3 & 0x3F) << 0));\n        break;\n    }\n  }\n  return out;\n}\nasync function getTextOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    return uintToString(new Uint8Array(content));\n  }\n  return null;\n}\n\n\nexport { getImageOnIpfs, getTextOnIpfs, postCertificate, postText };\n","const crypto = require(\"crypto\");\n\nfunction getPixelsFromContext(context, width, height) {\n  let result = [];\n  for (let i = 0; i < height; i++) {\n    result.push([]);\n    for (let j = 0; j < width; j++) {\n      const pixel = context.getImageData(j, i, 1, 1).data;\n      result[i].push([pixel[0], pixel[1], pixel[2]]);\n    }\n  }\n  return result;\n}\n\nfunction getPixelsFromImage(fileElement) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    const img = new Image();\n    reader.onload = function () {\n      img.src = reader.result;\n      img.onload = function () {\n        const canvas = document.createElement(\"canvas\");\n        const context = canvas.getContext(\"2d\");\n        context.drawImage(img, 0, 0);\n        const pixels = getPixelsFromContext(context, img.width, img.height);\n        resolve(pixels);\n      };\n    };\n    reader.readAsDataURL(fileElement.files[0]);\n  });\n}\n\nasync function getHashFromImage(fileElement) {\n  const pixels = await getPixelsFromImage(fileElement);\n  return makeHashFromPixels(pixels);\n}\n\nfunction makeHashFromPixels(pixels) {\n  const text = pixels\n    .map((row) => {\n      console.log(row);\n      return row\n        .map((pixel) => {\n          return \"\" + pixel[0] + pixel[1] + pixel[2];\n        })\n        .join(\"\");\n    })\n    .join(\"\");\n  console.log(text);\n  const md5 = crypto.createHash(\"md5\");\n  return md5.update(text, \"binary\").digest(\"hex\");\n}\n\nfunction fileInputToDataURL(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener(\n      \"load\",\n      () => {\n        resolve(reader.result);\n      },\n      false\n    );\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction createBlobFromImageDataURI(uri) {\n  const byteString = atob(uri.split(\",\")[1]);\n  const mimeType = uri.match(/(:)([a-z/]+)(;)/)[2];\n  for (\n    var i = 0, l = byteString.length, content = new Uint8Array(l);\n    l > i;\n    i++\n  ) {\n    content[i] = byteString.charCodeAt(i);\n  }\n\n  const blob = new Blob([content], {\n    type: mimeType,\n  });\n  return blob;\n}\n\nexport { fileInputToDataURL, createBlobFromImageDataURI, getHashFromImage };\n","import React from \"react\";\nimport \"./Certificate.css\";\nimport { dateString } from \"../util\";\nimport { getImageOnIpfs } from \"../image-upload\";\n\nfunction displayedTitle(title) {\n  if (!title) {\n    return \"\";\n  }\n  if (title.length > 16) {\n    return title.substr(0, 16) + \"...\";\n  }\n  return title;\n}\nclass CertCellComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n  }\n  render() {\n    return (\n      <div className=\"cert-cell\">\n        <img src={!this.props.certificate.imageUrl ? \"\" : this.props.certificate.imageUrl} className=\"cert-cell-image\" alt=\"certificate\" />\n        <div className=\"cert-cell-info\">\n          <p className=\"cert-cell-title\">\n            { displayedTitle(this.props.certificate.titleInIpfs) }\n          </p>\n          <p className=\"cert-cell-issueser\">\n            { this.props.certificate.byProfile ? \"by \" + this.props.certificate.byProfile.name.substr(0, 16) : \"\" } { this.props.certificate.toProfile ? \"to \" + this.props.certificate.toProfile.name.substr(0, 16) : \"\" }\n          </p>\n          <p className=\"cert-cell-date\">\n            at {\n              dateString(new Date(this.props.certificate.time * 1000))\n            }\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  CertCellComponent\n};\n","import React from \"react\";\nimport { CommunicationLoading } from \"./components\";\nimport \"./Certificate.css\";\nimport { Link } from \"react-router-dom\";\nimport { CertCellComponent } from \"./CertCell\";\n\n\nclass CertListComponent extends React.Component {\n  componentDidMount() {\n    this.props.getInfoOfCertificates();\n  }\n  render() {\n    return (\n      <div className=\"certificates\">\n        { this.props.certificates.length === 0 ? <p className=\"certificate-not-found\">There are no certificates.</p> : \"\" }\n        { this.props.certificates.map((certificate, index) => {\n          return (\n            <Link to={\"/\" + this.props.path + \"/\" + index}>\n              <CertCellComponent certificate={certificate} />\n            </Link>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\n\nclass MyCertListComponent extends React.Component {\n  render() {\n    let path = \"\";\n    if (this.props.path) {\n      path = this.props.path;\n    }\n    return (\n      <div className=\"mycertificates\">\n        <h2 className=\"mycertificates-title\"><a href=\"javascript:void(0)\" onClick={this.props.changeTabToMyCertificates}> My Certificates</a><span onClick={this.props.getCertificates}>🔃</span> <a href=\"javascript:void(0)\" onClick={this.props.changeTabToIssueser} >Certificates I issuesed</a><span onClick={this.props.getCertificatesIIssuesed}>🔃</span></h2>\n        { this.props.isLoading ? <CommunicationLoading /> : \"\" }\n        { !this.props.isLoading && this.props.tab === 0 ? <CertListComponent\n          certificates={this.props.certificates}\n          path={path + \"certs\"}\n          getInfoOfCertificates={this.props.getInfoOfCertificates}\n        /> : \"\" }\n        { !this.props.isLoading && this.props.tab === 1 ? <CertListComponent\n          certificates={this.props.certificatesIIssuesed}\n          getInfoOfCertificates={this.props.getInfoOfCertificatesIIssuesed}\n          path={path + \"issuesed\"}\n        /> : \"\" }\n      </div>\n    );\n  }\n}\n\nexport {\n  CertListComponent,\n  MyCertListComponent,\n}\n","import React from \"react\";\nimport { MyInfoComponent } from \"./MyInfo\";\nimport { MyCertListComponent } from \"./CertList\";\n\nclass MyPageComponent extends React.Component {\n  componentDidMount() {\n    if (this.props.certificates.length === 0) {\n      this.props.getCertificates();\n    }\n  }\n  render() {\n    return (\n      <div className=\"show\">\n        <MyInfoComponent \n          address={this.props.address} \n          profile={this.props.profile}\n          exportAccount={this.props.exportAccount} \n          onCopyId={this.props.onCopyId}\n          logout={this.props.logout}\n          openExportModal={this.props.openExportModal}\n        />\n        <MyCertListComponent \n          certificates={this.props.certificates}\n          certificatesIIssuesed={this.props.certificatesIIssuesed}\n          isLoading={this.props.isLoading} \n          getCertificates={this.props.getCertificates}\n          getCertificatesIIssuesed={this.props.getCertificatesIIssuesed}\n          changeTabToIssueser={this.props.changeTabToIssueser}\n          changeTabToMyCertificates={this.props.changeTabToMyCertificates}\n          tab={this.props.tab}\n          getInfoOfCertificates={this.props.getInfoOfCertificates}\n          getInfoOfCertificatesIIssuesed={this.props.getInfoOfCertificatesIIssuesed}\n        />\n      </div>\n    );\n  }\n}\n\nexport {\n  MyPageComponent,\n}\n","import React from \"react\";\n\nclass NotFoundComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"not-found\">\n        <h2>404 Not Found.</h2>\n      </div>\n    );\n  }\n}\n\nexport default NotFoundComponent;\n","import React from \"react\";\nimport \"./Certificate.css\";\nimport { getTextOnIpfs, getImageOnIpfs } from \"../image-upload\";\nimport { dateString } from \"../util\";\nimport { Link } from \"react-router-dom\";\nimport NotFoundComponent from \"./404\";\n\nclass CertViewComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.client = props.client;\n    const index = parseInt(props.match.params.index);\n    let address = this.client.address;\n    if (props.fromUserPage) {\n      address = props.match.params.address;\n    }\n    this.index = index;\n    this.state = {\n      address,\n      index: index,\n      verified: null,\n      title: \"\",\n      imageUrl: \"\",\n    }\n  }\n  back() {\n    if (this.state.index > 0) {\n      this.setState({\n        index: this.state.index - 1,\n        verified: null,\n      });\n    }\n  }\n  next() {\n    if (this.state.index < this.props.certificates.length - 1) {\n      this.setState({\n        index: this.state.index + 1,\n        verified: null,\n      });\n    }\n  }\n  componentDidMount() {\n    if (this.props.fromUserPage) {\n      if (this.props.getCertificates) {\n        this.props.getCertificates(this.state.address);\n      }\n      if (this.props.getCertificatesIIssuesed) {\n        this.props.getCertificatesIIssuesed(this.state.address);\n      }\n    }\n  }\n  loadDetail() {\n    this.loadImage();\n    this.loadTitle();\n    this.loadDescription();\n  }\n  async loadImage() {\n    if (this.state.index < 0 || this.props.certificates.length <= this.state.index) {\n      return;\n    }\n    const certificate = this.props.certificates[this.state.index];\n    if (certificate.imageUrl) {\n      this.setState({\n        imageUrl: certificate.imageUrl\n      });\n      return;\n    }\n    let imageUrl;\n    try {\n      imageUrl = await getImageOnIpfs(certificate.ipfs);\n    } catch(err) {\n      console.error(err);\n      return;\n    }\n    this.setState({\n      imageUrl\n    });\n  }\n  async loadTitle() {\n    if (this.state.index < 0 || this.props.certificates.length <= this.state.index) {\n      return;\n    }\n    const certificate = this.props.certificates[this.state.index];\n    if (certificate.titleInIpfs) {\n      this.setState({\n        titleInIpfs: certificate.titleInIpfs\n      });\n      return;\n    }\n    let title;\n    try {\n      title = await getTextOnIpfs(certificate.title);\n    } catch(err) {\n      console.error(err);\n      this.setState({\n        titleInIpfs: \"\",\n      });\n      return;\n    }\n    this.setState({\n      titleInIpfs: title,\n    });\n  }\n  async loadDescription() {\n    if (this.state.index < 0 || this.props.certificates.length <= this.state.index) {\n      return;\n    }\n    const certificate = this.props.certificates[this.state.index];\n    if (certificate.descriptionInIpfs) {\n      this.setState({\n        descriptionInIpfs: certificate.descriptionInIpfs,\n      });\n      return;\n    }\n    let description;\n    try {\n      description = await getTextOnIpfs(certificate.description);\n    } catch(err) {\n      console.error(err);\n      this.setState({\n        descriptionInIpfs: \"\",\n      });\n      return;\n    }\n    this.setState({\n      descriptionInIpfs: description,\n    });\n  }\n  async verifyCertificate() {\n    const client = this.props.client;\n    const certificate = this.props.certificates[this.state.index];\n    let verified;\n    if (this.props.fromUserPage) {\n      verified = client.verifyCertificate(certificate, client.address);\n    } else {\n      verified = client.verifyCertificate(certificate, this.state.address);\n    }\n    this.setState({\n      verified: verified,\n    });\n  }\n  componentDidMount() {\n    this.loadDetail();\n  }\n  render() {\n    if (this.state.index < 0 || this.props.certificates.length <= this.state.index) {\n      return (\n        <NotFoundComponent />\n      );\n    }\n    const certificate = this.props.certificates[this.state.index];\n    return (\n      <div className=\"cert-view\">\n        <div className=\"cert-view-top\">\n          <button className=\"back\" onClick={this.back.bind(this)}>＜</button>\n          <img src={certificate.imageUrl} className=\"cert-view-image\" alt=\"GxCert\" />\n          <button className=\"next\" onClick={this.next.bind(this)}>＞</button>\n        </div>\n        <div className=\"cert-view-bottom\">\n          <button onClick={this.verifyCertificate.bind(this)} className=\"verify-button\">Verify</button>\n          <p className=\"cert-view-title\">\n            { this.state.verified ? \"✅ This certificate is valid.\" : \"\" }\n            { !this.state.verified && this.state.verified !== null ? \"❌ This certificate is invalid.\" : \"\" }<br/>\n            { certificate.titleInIpfs }<br/>\n            by <Link to={\"/users/\" + certificate.by }>{ !certificate.issueserName ? certificate.by.substr(0, 16) : certificate.issueserName }</Link> { !certificate.to ? \"\" : \"to \" + certificate.to.substr(0, 16) } at {\n              dateString(new Date(certificate.time * 1000))\n            }\n          </p>\n          <p className=\"cert-view-description\">\n            { certificate.descriptionInIpfs }\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  CertViewComponent\n}\n","import React from \"react\";\nimport { getImageOnIpfs } from \"../image-upload\";\nimport \"./User.css\";\nimport { MyCertListComponent } from \"./CertList\";\nimport NotFoundComponent from \"./404\";\n\nclass UserComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    const address = this.props.match.params.id;\n    this.props.fetchProfile(address);\n    this.props.getCertificates(address);\n  }\n  render() {\n    if (this.props.isNotFound) {\n      return (\n        <NotFoundComponent />\n      );\n    }\n    console.log(this.props);\n    const address = this.props.match.params.id;\n    return (\n      <div className=\"user\">\n        <img src={this.props.imageUrl} className=\"user-icon\" />\n        <h2 className=\"user-name\">\n          { this.props.name }\n        </h2>\n        <MyCertListComponent\n          isLoading={this.props.isLoading}\n          certificates={this.props.certificates}\n          certificatesIIssuesed={this.props.certificatesIIssuesed}\n          getInfoOfCertificates={this.props.getInfoOfCertificates}\n          getInfoOfCertificatesIIssuesed={this.props.getInfoOfCertificatesIIssuesed}\n          getCertificates={this.props.getCertificates}\n          getCertificatesIIssuesed={this.props.getCertificatesIIssuesed}\n          changeTabToIssueser={() => {\n            return this.props.changeTabToIssueser(address);\n          }}\n          changeTabToMyCertificates={this.props.changeTabToMyCertificates}\n          tab={this.props.tab}\n          path={\"users/\" + address + \"/\"}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserComponent;\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport CommunicationLoading from \"./Loading\";\nimport \"./BsModal.css\";\n\nexport default class BsExportModal extends React.Component {\n  render() {\n    return (\n      <div className=\"modal\">\n        <Modal show={true} animation={true} >\n          <Modal.Body>\n            <p className=\"message\">Choose way to export account.</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <a href=\"javascript:void(0)\" onClick={this.props.exportFile} className=\"export-file-button\">\n                Export as a file\n            </a>\n            <Button variant=\"primary\" onClick={this.props.copyAccount} >\n              Copy to the clipboard\n            </Button>\n            <Button variant=\"primary\" onClick={this.props.closeExportModal} >\n              Back\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { getGoogleUid } from \"./util\";\nimport CertClient, {clientWithoutAccount} from \"./client\";\nimport Login from \"./views/Login\";\nimport { IssueComponent } from \"./views/Issue\";\nimport { SettingComponent } from \"./views/Setting\";\nimport { BrowserRouter as Router, Route, Link, Switch, withRouter } from \"react-router-dom\";\nimport { MyPageComponent } from \"./views/MyPage\";\nimport { CertViewComponent } from \"./views/CertView\";\nimport UserComponent from \"./views/User\";\nimport BsModal from \"./views/components/BsModal\";\nimport BsExportModal from \"./views/components/BsExportModal\";\n\n\nconst UI = {\n  byId: function(id) {\n    return document.getElementById(id);\n  },\n  showErrorMessage: function(message) {\n    console.error(message);\n  },\n  showMessage: function(message) {\n    console.log(message);\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.myPageRef = React.createRef();\n    this.state = {\n      myPageIsLoading: true,\n      issuePageIsLoading: false,\n      certificates: [],\n      message: null,\n    }\n  }\n  closeModal() {\n    this.setState({\n      issuePageIsLoading: false,\n      message: null,\n    });\n  }\n  render() {\n    const that = this;\n    console.log(that.props);\n    const modalIsShow = this.props.state.isLoading || this.props.state.message !== null || this.props.state.errorMessage !== null;\n    const isLoading = this.props.state.isLoading;\n    const profile = this.props.state.myProfile;\n    const client = this.props.state.client;\n    let name = \"\";\n    if (client !== null && client.profile !== null) {\n      name = client.profile.nameInIpfs;\n    }\n    let icon = \"\";\n    if (profile) {\n      icon = profile.icon;\n    }\n    const login = (\n      <Login onClick={this.props.loginWithGoogle} />\n    );\n    let exportModal = \"\";\n    if (this.props.state.exportModalIsShown) {\n      exportModal = (\n        <BsExportModal\n          exportFile={this.props.exportFile} \n          copyAccount={this.props.copyAccount}\n          closeExportModal={this.props.closeExportModal}\n        />\n      );\n    }\n    const main = (\n        <div className=\"main\">\n          <header>\n          <h2 className=\"brand-logo\"><a href=\"/\">GxCert</a></h2>\n          <Link to=\"/issue\" className=\"header-issue-button header-button\">Issue</Link>\n          <Link to=\"/\" className=\"header-show-button header-button\">{client !== null && client.profile && client.profile.nameInIpfs ? client.profile.nameInIpfs.substr(0, 6) + \"...\" : \"Profile\" }</Link>\n          </header>\n          <div className=\"main\">\n            <Switch>\n              <Route exact path=\"/\" render={ () => <MyPageComponent \n                address={client.address} \n                profile={client.profile}\n                isLoading={that.props.state.myPageIsLoading} \n                certificates={that.props.state.certificates} \n                certificatesIIssuesed={that.props.state.certificatesIIssuesed}\n                getCertificates={that.props.getCertificates} \n                getCertificatesIIssuesed={that.props.getCertificatesIIssuesed} \n                openExportModal={that.props.openExportModal}\n                onCopyId={that.props.onCopyId}\n                getInfoOfCertificates={that.props.getInfoOfCertificates}\n                getInfoOfCertificatesIIssuesed={that.props.getInfoOfCertificatesIIssuesed}\n                changeTabToIssueser={that.props.changeTabToIssueser}\n                changeTabToMyCertificates={that.props.changeTabToMyCertificates}\n                tab={that.props.state.tabInMyPage}\n                logout={that.props.logout}\n              /> } />\n              <Route exact path=\"/issue\" render={ () => <IssueComponent \n                onClickIssueButton={this.props.issue} \n                onChangeCertificateImage={this.props.onChangeCertificateImage} \n                onChangeIssueTo={this.props.onChangeIssueTo} \n                onChangeTitle={this.props.onChangeTitle}\n                onChangeDescription={this.props.onChangeDescription}\n              /> } />\n              <Route exact path=\"/user\" render={ () => <SettingComponent \n                onClickUpdateButton={this.props.updateUserSetting} \n                onChangeName={this.props.onChangeName} \n                onChangeIcon={this.props.onChangeIcon} \n                name={name}\n              /> } />\n              <Route exact path=\"/users/:id\" render={ (routeProps) => <UserComponent\n                { ...routeProps }\n                profile={that.props.state.profileInUserPage}\n                fetchProfile={that.props.fetchProfileInUserPage}\n                imageUrl={that.props.state.iconInUserPage}\n                name={that.props.state.nameInUserPage}\n                isLoading={that.props.state.userPageIsLoading}\n                certificates={that.props.state.certificatesInUserPage}\n                certificatesIIssuesed={that.props.state.certificatesIIssuesedInUserPage}\n                getCertificates={that.props.getCertificatesInUserPage}\n                getCertificatesIIssuesed={that.props.getCertificatesIIssuesedInUserPage}\n                getInfoOfCertificates={that.props.getInfoOfCertificatesInUserPage}\n                getInfoOfCertificatesIIssuesed={that.props.getInfoOfCertificatesIIssuesedInUserPage}\n                changeTabToIssueser={that.props.changeTabInUserPageToIssueser}\n                changeTabToMyCertificates={that.props.changeTabInUserPageToMyCertificates}\n                tab={that.props.state.tabInUserPage}\n                isNotFound={that.props.state.userIsNotFound}\n              /> } />\n              <Route exact path=\"/users/:address/issuesed/:index\" render={ (routeProps) => <CertViewComponent {...routeProps} \n                certificates={that.props.state.certificatesIIssuesedInUserPage}\n                client={clientWithoutAccount}\n                getCertificates={that.props.getCertificatesInUserPage}\n                fromUserPage={true}\n              /> } />\n              <Route exact path=\"/users/:address/certs/:index\" render={ (routeProps) => <CertViewComponent {...routeProps} \n                certificates={that.props.state.certificatesInUserPage}\n                client={clientWithoutAccount}\n                getCertificatesIIssuesed={that.props.getCertificatesIIssuesedInUserPage}\n                fromUserPage={true}\n              /> } />\n              <Route exact path=\"/issuesed/:index\" render={ (routeProps) => <CertViewComponent {...routeProps}\n                certificates={that.props.state.certificatesIIssuesed}\n                client={clientWithoutAccount}\n              />} />\n              <Route exact path=\"/certs/:index\" render={ (routeProps) => <CertViewComponent {...routeProps} \n                certificates={that.props.state.certificates} \n                client={clientWithoutAccount}\n              />} />\n            </Switch>\n          </div>\n          <BsModal show={modalIsShow} closeModal={this.props.closeModal} isLoading={isLoading} message={this.props.state.message} errorMessage={this.props.state.errorMessage}/>\n          { exportModal }\n        </div>\n    );\n    return (\n        <div className=\"App\">\n          { !this.props.location.pathname.startsWith(\"/users/\") && client === null ? login : main }\n          <BsModal show={modalIsShow} closeModal={this.props.closeModal} isLoading={isLoading} message={this.props.state.message} errorMessage={this.props.state.errorMessage}/>\n        </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import CertClient, { getClientFromState, clientWithoutAccount } from \"../client\"\nimport { getTextOnIpfs, postText, fileInputToDataURL, createBlobFromImageDataURI, postCertificate, getImageOnIpfs } from \"../image-upload\";\nimport { copyText, getGoogleUid } from \"../util\";\n\nconst getMyProfile = () => async (dispatch, getState) => {\n  const client = getState().state.client;\n  let profile;\n  try {\n    await client.getProfile(client.address, profile => {\n      dispatch({\n        type: \"GET_MYPROFILE\",\n        payload: profile,\n      });\n    });\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n}\nconst getCertificates = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES\",\n    payload: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  client.getCertificates(client.address, (certificates) => {\n    console.log(certificates);\n    dispatch({\n      type: \"GET_CERTIFICATES\",\n      payload: certificates,\n    });\n  }).then(certificates => {\n    \n  }).catch(err => {\n    console.error(err);\n    dispatch({\n      type: \"GET_CERTIFICATES\",\n      payload: null,\n      error: err,\n    });\n  });\n}\n\nconst getCertificatesInUserPage = (address) => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES_IN_USER_PAGE\",\n    payload: null,\n  });\n  const client = clientWithoutAccount;\n  client.getCertificates(address, (certificates) => {\n    dispatch({\n      type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n      payload: certificates,\n    });\n  }).then(certificates => {\n    \n  }).catch(err => {\n    console.error(err);\n    dispatch({\n      type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n      payload: null,\n      error: err,\n    });\n  });\n}\nconst getCertificatesIIssuesed = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES_I_ISSUESED\",\n    payload: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  client.getCertificatesIIssuesed(client.address, (certificates) => {\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED\",\n      payload: certificates,\n    });\n  }).then(certificates => {\n\n  }).catch(err => {\n    console.error(err);\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED\",\n      payload: null,\n      error: err,\n    });\n  });\n}\nconst getCertificatesIIssuesedInUserPage = (address) => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n    payload: null,\n  });\n  const client = clientWithoutAccount;\n  client.getCertificatesIIssuesed(address, (certificates) => {\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n      payload: certificates,\n    });\n  }).then(certificates => {\n\n  }).catch(err => {\n    console.error(err);\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n      payload: null,\n      error: err,\n    });\n  });\n}\nconst issue = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CLICK_ISSUE_BUTTON\",\n    payload: null,\n    error: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  const state = getState().state;\n  const issueTo = state.issueTo;\n  const image = state.certificateImage;\n  const title = state.title.trim();\n  const description = state.description.trim();\n  if (issueTo === null || image === null || title === \"\") {\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: new Error(\"The certificate image or address is not set.\"),\n    });\n    return;\n  }\n  let ipfsHashOfImage = null;\n  try {\n    const imageData = await fileInputToDataURL(image);\n    const blob = createBlobFromImageDataURI(imageData);\n    ipfsHashOfImage = await postCertificate(blob);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  let ipfsHashOfTitle = null;\n  try {\n    ipfsHashOfTitle = await postText(title);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  let ipfsHashOfDescription = null;\n  try {\n    ipfsHashOfDescription = await postText(description);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  try {\n    const certificate = client.createCertificateObject(ipfsHashOfTitle, ipfsHashOfDescription, ipfsHashOfImage, issueTo);\n    await client.issueCertificate(certificate, issueTo);\n  } catch(err) {\n    console.log(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  dispatch({\n    type: \"ISSUE\",\n    payload: null,\n    error: null,\n  });\n}\n\nconst onChangeCertificateImage = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_CERTIFICATE_IMAGE\",\n    payload: evt.target.files[0],\n  });\n}\n\nconst onChangeIssueTo = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_ISSUE_TO\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeDescription = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_DESCRIPTION\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeName = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeIcon = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_ICON\",\n    payload: evt.target.files[0],\n  });\n}\nconst onChangeTitle = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_TITLE\",\n    payload: evt.target.value,\n  });\n}\n\nconst closeModal = () => async (dispatch) => {\n  dispatch({\n    type: \"CLOSE_MODAL\",\n    payload: null,\n  });\n}\n\nconst updateUserSetting = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_UPDATE_USER_SETTING\",\n    payload: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  const state = getState().state;\n  if ((!state.name || state.name.trim() === \"\") && (!state.icon)) {\n    dispatch({\n      type: \"UPDATE_USER_SETTING\",\n      payload: null,\n      error: new Error(\"The input fields are empty.\"),\n    });\n    return;\n  }\n  if (state.name !== null && state.name.trim() !== \"\") {\n    let name = state.name.trim();\n    try {\n      name = await postText(name);\n    } catch(err) {\n      dispatch({\n        type: \"UPDATE_USER_SETTING\",\n        payload: null,\n        error: err,\n      });\n      return;\n    }\n    try {\n      await client.registerName(name);\n    } catch(err) {\n      dispatch({\n        type: \"UPDATE_USER_SETTING\",\n        payload: null,\n        error: err,\n      });\n      return;\n    }\n  }\n  if (state.icon !== null) {\n    let ipfsHashOfImage = null;\n    try {\n      const imageData = await fileInputToDataURL(state.icon);\n      const blob = createBlobFromImageDataURI(imageData);\n      ipfsHashOfImage = await postCertificate(blob);\n      await client.registerIcon(ipfsHashOfImage);\n    } catch(err) {\n      dispatch({\n        type: \"UPDATE_USER_SETTING\",\n        payload: null,\n        error: err,\n      });\n      return;\n    }\n  }\n  dispatch({\n    type: \"UPDATE_USER_SETTING\",\n    payload: null,\n    error: null,\n  });\n}\n\nconst onCopyId = () => async (dispatch) => {\n  dispatch({\n    type: \"ON_COPY_ID\",\n    payload: null,\n  });\n}\n\nconst changeTabToIssueser = () => async (dispatch) => {\n  console.log(\"change to issueser\");\n  dispatch({\n    type: \"CHANGE_TAB_TO_ISSUESER\",\n    payload: null,\n  });\n}\n\nconst changeTabToMyCertificates = () => async (dispatch) => {\n  dispatch({\n    type: \"CHANGE_TAB_TO_MY_CERTIFICATES\",\n    payload: null,\n  });\n}\n\nconst fetchProfileInUserPage = (id) => async (dispatch, getState) => {\n  const client = clientWithoutAccount;\n  if (!client) {\n    return;\n  }\n  let profile;\n  try {\n    profile = await client.getProfile(id, profile => {\n      dispatch({\n        type: \"FETCH_PROFILE_IN_USER_PAGE\",\n        payload: profile,\n      });\n    });\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"FETCH_PROFILE_IN_USER_PAGE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n}\n\nconst changeTabInUserPageToIssueser = () => async (dispatch) => {\n  dispatch({\n    type: \"CHANGE_TAB_IN_USER_PAGE_TO_ISSUESER\",\n    payload: null,\n  });\n}\nconst changeTabInUserPageToMyCertificates = () => async (dispatch) => {\n  dispatch({\n    type: \"CHANGE_TAB_IN_USER_PAGE_TO_MY_CERTIFICATES\",\n    payload: null,\n  });\n}\n\nconst getInfoOfCertificates = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificates;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.titleInIpfs && certificate.title) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs && certificate.description) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst getInfoOfCertificatesIIssuesed = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificatesIIssuesed;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.titleInIpfs && certificate.title) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs && certificate.description) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst getInfoOfCertificatesInUserPage = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificatesInUserPage;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.titleInIpfs) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst getInfoOfCertificatesIIssuesedInUserPage = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificatesIIssuesedInUserPage;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      });\n    }\n    if (!certificate.titleInIpfs) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst logout = () => async (dispatch) => {\n  dispatch({\n    type: \"LOGOUT\",\n    payload: null,\n  });\n}\n\nconst exportFile = (evt) => async (dispatch, getState) => {\n  const client = getClientFromState(getState().state.client);\n  const uid = client.uid;\n  const json = JSON.stringify({\n    uid,\n  })\n  const blob = new Blob([json], {type: \"application/json\"});\n  const a = evt.target;\n  a.download = \"account.json\";\n  a.href = window.URL.createObjectURL(blob);\n}\n\nconst openExportModal = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"OPEN_EXPORT_MODAL\",\n    payload: null,\n  });\n}\nconst closeExportModal = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"CLOSE_EXPORT_MODAL\",\n    payload: null,\n  });\n}\nconst copyAccount = () => async (dispatch, getState) => {\n  const client = getClientFromState(getState().state.client);\n  const uid = client.uid;\n  copyText(uid);\n}\n\nconst loginWithGoogle = () => async (dispatch) => {\n  const uid = await getGoogleUid();\n  const client = CertClient(uid + \"1\");\n  dispatch({\n    type: \"LOADING\",\n    payload: null,\n  });\n  await client.init();\n  console.log(client.address); \n  dispatch({\n    type: \"INITIALIZE_CLIENT\",\n    payload: client,\n  });\n}\n\nexport {\n  getMyProfile,\n  getCertificates,\n  getCertificatesInUserPage,\n  getCertificatesIIssuesed,\n  getCertificatesIIssuesedInUserPage,\n  issue,\n  onChangeCertificateImage,\n  onChangeIssueTo,\n  onChangeName,\n  onChangeIcon,\n  onChangeDescription,\n  updateUserSetting,\n  exportFile,\n  onChangeTitle,\n  closeModal,\n  onCopyId,\n  changeTabToIssueser,\n  changeTabToMyCertificates,\n  fetchProfileInUserPage,\n  changeTabInUserPageToIssueser,\n  changeTabInUserPageToMyCertificates,\n  getInfoOfCertificates,\n  getInfoOfCertificatesInUserPage,\n  getInfoOfCertificatesIIssuesed,\n  getInfoOfCertificatesIIssuesedInUserPage,\n  logout,\n  loginWithGoogle,\n  openExportModal,\n  closeExportModal,\n  copyAccount,\n}\n","import CertClient from \"./client\";\n\nconst initialState = {\n  uid: null,\n  isLoading: false,\n  certificateImage: null,\n  issueTo: null,\n  certificates: [],\n  certificatesIIssuesed: [],\n  myPageIsLoading: false,\n  myProfile: null,\n  name: \"\",\n  icon: null,\n  title: \"\",\n  errorMessage: null,\n  message: null,\n  tabInMyPage: 0,\n  iconInUserPage: null,\n  nameInUserPage: null,\n  profileInUserPage: null,\n  userPageIsLoading: false,\n  certificatesInUserPage: [],\n  certificatesIIssuesedInUserPage: [],\n  tabInUserPage: 0,\n  client: null,\n  address: null,\n  description: \"\",\n  userIsNotFound: false,\n  exportModalIsShown: false,\n}\n\nexport default initialState;\n","import { combineReducers, createStore, compose, applyMiddleware } from \"redux\";\nimport Reducer from \"./reducer\";\nimport thunk from \"redux-thunk\";\nimport { persistReducer, persistStore } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport initialState from \"./initialState\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, Reducer);\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers({\n    state: persistedReducer,\n  }),\n  initialState,\n  storeEnhancers(applyMiddleware(thunk))\n);\n\nexport const persistor = persistStore(store);\nexport default store;\n","\nimport initialState from \"./initialState\";\n\n\nexport default function Reducer(state=initialState, action) {\n  switch(action.type) {\n    case \"ON_CLICK_ISSUE_BUTTON\":\n      return Object.assign({}, state, {\n        isLoading: true,\n        message: \"Issuesing the certificate...\",\n      }); \n    case \"START_UPDATE_USER_SETTING\":\n      return Object.assign({}, state, {\n        isLoading: true,\n        message: \"Updating your setting...\",\n      }); \n    case \"UPDATE_USER_SETTING\":\n      if ((!state.name || state.name.trim() === \"\") && (!state.icon)) {\n        return Object.assign({}, state, {\n          isLoading: false,\n          message: null,\n          errorMessage: \"The input fields are empty.\",\n        });\n      }\n      if (action.error) {\n        return Object.assign({}, state, {\n          isLoading: false,\n          message: null,\n          errorMessage: \"Failed to update your setting.\",\n        });\n      }\n      return Object.assign({}, state, {\n        isLoading: false,\n        message: \"Successfully updated your setting.\",\n      }); \n    case \"ISSUE\":\n      if (state.issueTo === null || state.certificateImage === null || state.title.trim() === \"\") {\n        return Object.assign({}, state, {\n          isLoading: false,\n          message: null,\n          errorMessage: \"Fill the input fields.\",\n        });\n        return;\n      }\n      if (action.error) {\n        return Object.assign({}, state, {\n          isLoading: false,\n          message: null,\n          errorMessage: \"Failed to issue the certificate.\",\n        });\n      }\n      return Object.assign({}, state, {\n        isLoading: false,\n        message: \"Successfully issuesed the certificate.\",\n      });\n    case \"GET_CERTIFICATES\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          myPageIsLoading: false,\n          errorMessage: \"Failed to fetch your certificates.\",\n        });\n      }\n      return Object.assign({}, state, {\n        certificates: action.payload,\n        myPageIsLoading: false,\n      });\n    case \"GET_CERTIFICATES_I_ISSUESED\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          myPageIsLoading: false,\n          errorMessage: \"Failed to fetch the certificates that you issuesed.\",\n        });\n      }\n      return Object.assign({}, state, {\n        certificatesIIssuesed: action.payload,\n        myPageIsLoading: false,\n      });\n    case \"GET_CERTIFICATES_IN_USER_PAGE\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          certificatesInUserPage: [],\n          userPageIsLoading: false,\n        });\n      }\n      return Object.assign({}, state, {\n        certificatesInUserPage: action.payload,\n        userPageIsLoading: false,\n      });\n    case \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          certificatesIIssuesedInUserPage: [],\n          userPageIsLoading: false,\n        });\n      }\n      return Object.assign({}, state, {\n        certificatesIIssuesedInUserPage: action.payload,\n        userPageIsLoading: false,\n      });\n    case \"ON_CHANGE_CERTIFICATE_IMAGE\":\n      return Object.assign({}, state, {\n        certificateImage: action.payload,\n      });\n    case \"ON_CHANGE_ISSUE_TO\":\n      return Object.assign({}, state, {\n        issueTo: action.payload,\n      });\n    case \"ON_CHANGE_TITLE\":\n      return Object.assign({}, state, {\n        title: action.payload,\n      });\n    case \"START_GETTING_CERTIFICATES\":\n      return Object.assign({}, state, {\n        myPageIsLoading: true,\n        tabInMyPage: 0,\n      });\n    case \"START_GETTING_CERTIFICATES_I_ISSUESED\":\n      return Object.assign({}, state, {\n        myPageIsLoading: true,\n        tabInMyPage: 1,\n      });\n    case \"START_GETTING_CERTIFICATES_IN_USER_PAGE\":\n      return Object.assign({}, state, {\n        userPageIsLoading: true,\n        tabInUserPage: 0,\n      });\n    case \"START_GETTING_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\":\n      return Object.assign({}, state, {\n        userPageIsLoading: true,\n        tabInUserPage: 1,\n      });\n    case \"GET_MYPROFILE\":\n      return Object.assign({}, state, {\n        myProfile: action.payload,\n      });\n    case \"ON_CHANGE_NAME\":\n      return Object.assign({}, state, {\n        name: action.payload,\n      });\n    case \"ON_CHANGE_DESCRIPTION\":\n      return Object.assign({}, state, {\n        description: action.payload,\n      });\n    case \"ON_CHANGE_ICON\":\n      return Object.assign({}, state, {\n        icon: action.payload,\n      });\n    case \"CLOSE_MODAL\":\n      return Object.assign({}, state, {\n        message: null,\n        errorMessage: null,\n      });\n    case \"ON_COPY_ID\":\n      return Object.assign({}, state, {\n        message: \"Successfully copied your ID\",\n      });\n    case \"CHANGE_TAB_TO_ISSUESER\":\n      return Object.assign({}, state, {\n        tabInMyPage: 1,\n      });\n    case \"CHANGE_TAB_TO_MY_CERTIFICATES\":\n      return Object.assign({}, state, {\n        tabInMyPage: 0,\n      });\n    case \"FETCH_PROFILE_IN_USER_PAGE\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          profileInUserPage: null,\n          nameInUserPage: null,\n          userIsNotFound: true,\n        });\n      }\n      return Object.assign({}, state, {\n        profileInUserPage: action.payload,\n        nameInUserPage: action.payload.nameInIpfs,\n        userIsNotFound: false,\n      });\n    case \"FETCH_ICON_IN_USER_PAGE\":\n      return Object.assign({}, state, {\n        iconInUserPage: action.payload,\n      });\n    case \"LOGOUT\":\n      return initialState;\n    case \"INITIALIZE_CLIENT\":\n      return Object.assign({}, state, {\n        client: action.payload,\n        isLoading: false,\n      });\n    case \"LOADING\":\n      return Object.assign({}, state, {\n        isLoading: true,\n      });\n    case \"OPEN_EXPORT_MODAL\":\n      return Object.assign({}, state, {\n        exportModalIsShown: true,\n      });\n    case \"CLOSE_EXPORT_MODAL\":\n      return Object.assign({}, state, {\n        exportModalIsShown: false,\n      });\n    default:\n      return state;\n  }\n}\n\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { \n  loginWithGoogle, \n  logout, \n  getInfoOfCertificatesIIssuesed, \n  getInfoOfCertificatesIIssuesedInUserPage, \n  getInfoOfCertificates, \n  getInfoOfCertificatesInUserPage, \n  getCertificatesInUserPage, \n  getCertificatesIIssuesedInUserPage, \n  changeTabInUserPageToIssueser, \n  changeTabInUserPageToMyCertificates, \n  fetchProfileInUserPage, \n  changeTabToIssueser, \n  changeTabToMyCertificates, \n  onCopyId, \n  exportFile, \n  closeModal, \n  getMyProfile, \n  getCertificates, \n  getCertificatesIIssuesed, \n  issue, \n  onChangeIssueTo, \n  onChangeCertificateImage, \n  onChangeName, \n  onChangeIcon, \n  onChangeDescription,\n  updateUserSetting, \n  onChangeTitle,\n  openExportModal,\n  closeExportModal,\n  copyAccount,\n} from \"./actions\";\nimport { connect, Provider } from \"react-redux\";\nimport store, { persistor } from \"./store\";\nimport { withRouter, HashRouter as Router } from \"react-router-dom\";\nimport CertClient from \"./client\"\n\nfunction mapStateToProps(state, props) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    getCertificates: () => {\n      dispatch(getCertificates());\n    },\n    getCertificatesIIssuesed: () => {\n      dispatch(getCertificatesIIssuesed());\n    },\n    issue: () => {\n      dispatch(issue());\n    },\n    onChangeIssueTo: (evt) => {\n      dispatch(onChangeIssueTo(evt));\n    },\n    onChangeCertificateImage: (evt) => {\n      dispatch(onChangeCertificateImage(evt));\n    },\n    getMyProfile: () => {\n      dispatch(getMyProfile());\n    },\n    onChangeName: (evt) => {\n      dispatch(onChangeName(evt));\n    },\n    onChangeIcon: (evt) => {\n      dispatch(onChangeIcon(evt));\n    },\n    onChangeTitle: (evt) => {\n      dispatch(onChangeTitle(evt));\n    },\n    onChangeDescription: (evt) => {\n      dispatch(onChangeDescription(evt));\n    },\n    updateUserSetting: () => {\n      dispatch(updateUserSetting());\n    },\n    exportFile: (evt) => {\n      dispatch(exportFile(evt));\n    },\n    openExportModal: () => {\n      dispatch(openExportModal());\n    },\n    closeModal: () => {\n      dispatch(closeModal());\n    },\n    onCopyId: () => {\n      dispatch(onCopyId());\n    },\n    getCertificatesInUserPage: (address) => {\n      dispatch(getCertificatesInUserPage(address));\n    },\n    getCertificatesIIssuesedInUserPage: (address) => {\n      dispatch(getCertificatesIIssuesedInUserPage(address));\n    },\n    changeTabToIssueser: () => {\n      dispatch(getCertificatesIIssuesed());\n    },\n    changeTabToMyCertificates: () => {\n      dispatch(getCertificates());\n    },\n    changeTabInUserPageToIssueser: (address) => {\n      dispatch(getCertificatesIIssuesedInUserPage(address));\n    },\n    changeTabInUserPageToMyCertificates: () => {\n      dispatch(changeTabInUserPageToMyCertificates());\n    },\n    fetchProfileInUserPage: (address) => {\n      dispatch(fetchProfileInUserPage(address));\n    },\n    getInfoOfCertificates: () => {\n      dispatch(getInfoOfCertificates());\n    },\n    getInfoOfCertificatesIIssuesed: () => {\n      dispatch(getInfoOfCertificatesIIssuesed());\n    },\n    getInfoOfCertificatesIIssuesedInUserPage: () => {\n      dispatch(getInfoOfCertificatesIIssuesedInUserPage());\n    },\n    getInfoOfCertificatesInUserPage: () => {\n      dispatch(getInfoOfCertificatesInUserPage());\n    },\n    logout: () => {\n      dispatch(logout());\n    },\n    loginWithGoogle: () => {\n      dispatch(loginWithGoogle());\n    },\n    closeExportModal: () => {\n      dispatch(closeExportModal());\n    },\n    copyAccount: () => {\n      dispatch(copyAccount());\n    }\n  }\n}\n\nconst RxApp = connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Router>\n        <RxApp />\n      </Router>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}