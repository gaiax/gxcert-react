{"version":3,"sources":["util/Firebase.js","util/Google.js","util/index.js","client.js","views/Login.js","views/Issue.js","views/Setting.js","views/MyInfo.js","views/components/Loading.js","views/components/BsModal.js","image-upload/ipfs.js","image-upload/image.js","views/CertCell.js","views/CertList.js","views/MyPage.js","views/404.js","views/CertView.js","views/User.js","views/components/BsExportModal.js","views/components/BsIssueModal.js","modalType.js","App.js","reportWebVitals.js","actions/index.js","initialState.js","store.js","reducer.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","auth","GoogleAuthProvider","getGoogleUid","a","signInWithPopup","result","user","uid","copyText","text","copyFrom","document","createElement","textContent","bodyElm","getElementsByTagName","appendChild","select","execCommand","removeChild","dateString","date","getFullYear","getMonth","getDate","clientWithoutAccount","Client","getClientFromState","client","address","rsaKeyPair","privKey","cryptico","generateRSAKey","pubKey","publicKeyString","getKeyPair","profile","cache","seed","CertClient","Login","className","src","onClick","this","props","React","Component","IssueComponent","type","id","onChange","onChangeCertificateImage","onChangeTitle","onChangeDescription","onChangeIssueTo","onClickIssueButton","SettingComponent","onClickUpdateButton","onChangeName","defaultValue","name","onChangeIcon","MyInfoComponent","onCopyId","imageUrl","nameInIpfs","alt","href","copyId","bind","to","openExportModal","logout","CommunicationLoading","BsModal","modal","isLoading","Modal","show","animation","Body","message","errorMessage","checkMark","closeModal","Footer","Button","variant","ipfs","IpfsHttpClient","host","port","protocol","postCertificate","blob","add","response","path","Error","postText","createImageUrlFromUint8Array","arr","Blob","window","URL","webkitURL","createObjectURL","concatBuffer","buffer1","buffer2","tmp","Uint8Array","byteLength","set","buffer","getImageOnIpfs","ipfsHash","async","get","data","console","log","content","ArrayBuffer","url","uintToString","array","out","i","len","c","char2","char3","length","String","fromCharCode","getTextOnIpfs","require","fileInputToDataURL","file","Promise","resolve","reject","reader","FileReader","addEventListener","readAsDataURL","createBlobFromImageDataURI","uri","byteString","atob","split","mimeType","match","l","charCodeAt","CertCellComponent","certificate","title","titleInIpfs","substr","byProfile","toProfile","Date","time","CertListComponent","getInfoOfCertificates","certificates","map","index","MyCertListComponent","changeTabToMyCertificates","changeTabToIssuer","tab","certificatesIIssued","getInfoOfCertificatesIIssued","MyPageComponent","getCertificates","exportAccount","getCertificatesIIssued","NotFoundComponent","CertViewComponent","parseInt","params","fromUserPage","state","verified","setState","verifyCertificate","back","next","by","issuerName","descriptionInIpfs","UserComponent","fetchProfile","isNotFound","BsExportModal","copyAccount","exportFile","BsIssueModal","error","App","myPageRef","createRef","myPageIsLoading","issuePageIsLoading","that","myProfile","icon","login","loginWithGoogle","ModalType","isIssuing","issueError","main","exact","render","tabInMyPage","issue","updateUserSetting","routeProps","profileInUserPage","fetchProfileInUserPage","iconInUserPage","nameInUserPage","userPageIsLoading","certificatesInUserPage","certificatesIIssuedInUserPage","getCertificatesInUserPage","getCertificatesIIssuedInUserPage","getInfoOfCertificatesInUserPage","getInfoOfCertificatesIIssuedInUserPage","changeTabInUserPageToIssuer","changeTabInUserPageToMyCertificates","tabInUserPage","userIsNotFound","location","pathname","startsWith","withRouter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","dispatch","getState","payload","entries","getTitle","catch","err","getImageUrl","initialState","certificateImage","issueTo","description","persistConfig","key","storage","persistedReducer","persistReducer","action","Object","assign","trim","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","persistor","persistStore","RxApp","connect","image","ipfsHashOfImage","imageData","ipfsHashOfTitle","ipfsHashOfDescription","createCertificateObject","issueCertificate","evt","target","value","files","getMyProfile","getProfile","registerName","registerIcon","json","JSON","stringify","download","init","closeExportModal","ReactDOM","loading","getElementById"],"mappings":"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","file":"static/js/main.00358e94.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBVg-6cdqXuAnS2gECbjHlbJd_Lt8qyQWw\",\n  authDomain: \"gxcert-21233.firebaseapp.com\",\n  projectId: \"gxcert-21233\",\n  storageBucket: \"gxcert-21233.appspot.com\",\n  messagingSenderId: \"500830367528\",\n  appId: \"1:500830367528:web:dfdb8fe5fa6b362d8faa1d\",\n  measurementId: \"G-ZGY6X71Q2R\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n//firebase.analytics();\n\nexport default firebase;\n","import firebase from \"./Firebase\";\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nasync function getGoogleUid() {\n  const result = await firebase.auth().signInWithPopup(provider);\n  return result.user.uid;\n}\n\nexport { getGoogleUid };\n","import { getGoogleUid } from \"./Google\";\n\nfunction copyText(text) {\n  const copyFrom = document.createElement(\"textarea\");\n  copyFrom.textContent = text;\n  const bodyElm = document.getElementsByTagName(\"body\")[0];\n  bodyElm.appendChild(copyFrom);\n  copyFrom.select();\n  document.execCommand('copy');\n  bodyElm.removeChild(copyFrom);\n}\n\nfunction getUrlQueries() {\n  let queryStr = window.location.search.slice(1);\n  let queries = {};\n  if (!queryStr) {\n    return queries;\n  }\n  queryStr.split(\"&\").forEach(function (queryStr) {\n    var queryArr = queryStr.split(\"=\");\n    queries[queryArr[0]] = queryArr[1];\n  });\n  return queries;\n}\nfunction dateString(date) {\n  return (\n    date.getFullYear() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getDate()\n  );\n}\n\n\nexport {\n  copyText,\n  getUrlQueries,\n  getGoogleUid,\n  dateString,\n}\n\n","import * as Client from \"gxcert-iota\";\nimport cryptico from \"cryptico\";\n\nconst clientWithoutAccount = new Client(\"https://chrysalis-nodes.iota.org\");\nfunction getKeyPair(uid) {\n  const privKey = cryptico.generateRSAKey(uid, 1024);\n  const pubKey = cryptico.publicKeyString(privKey);\n  return {\n    privKey,\n    pubKey,\n  }\n}\nfunction getClientFromState (client) {\n  const result = new Client(\"https://chrysalis-nodes.iota.org\");\n  result.address = client.address;\n  result.rsaKeyPair = getKeyPair(client.uid);\n  result.profile = client.profile;\n  result.cache = client.cache;\n  result.uid = client.uid;\n  result.seed = client.seed;\n  return result;\n}\n\nexport default function CertClient(uid) {\n  return new Client(\"https://chrysalis-nodes.iota.org\", uid);\n}\n\nexport {\n  getClientFromState,\n  clientWithoutAccount\n}\n\n","import React from \"react\";\nimport \"./Login.css\";\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div className=\"login-page\">\n        <img src=\"/google.png\" className=\"login-google\" onClick={this.props.onClick} />\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport \"./Issue.css\";\nimport \"./reset.css\";\n\n\nclass IssueComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"issue\">\n        <div className=\"issue-wrapper\">\n          <h2 className=\"issue-title\">Issue Certificate</h2>\n          <h5 className=\"issue-image-title issue-input-title\">Certificate Image</h5>\n          <input type=\"file\" id=\"issue-image\" className=\"issue-image issue-input\" onChange={this.props.onChangeCertificateImage} />\n          <h5 className=\"issue-to-title issue-input-title\">Title</h5>\n          <input type=\"text\" id=\"issue-title\" className=\"issue-input\" onChange={this.props.onChangeTitle} /><br/>\n          <h5 className=\"issue-to-description issue-input-title\">Description</h5>\n          <textarea id=\"issue-description\" className=\"issue-description issue-input\" onChange={this.props.onChangeDescription}></textarea><br/>\n          <h5 className=\"issue-to-title issue-input-title\">To</h5>\n          <input type=\"text\" id=\"issue-to\" className=\"issue-to issue-input\" onChange={this.props.onChangeIssueTo} /><br/>\n          <button className=\"issue-button\" id=\"issue-button\" onClick={this.props.onClickIssueButton}>Issue</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  IssueComponent,\n}\n","import React from \"react\";\nimport \"./Setting.css\";\n\nclass SettingComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickUpdateButton = props.onClickUpdateButton;\n  }\n  render () {\n    return (\n      <div className=\"setting\">\n        <div className=\"setting-wrapper\">\n          <h2 className=\"setting-title\">\n            User Settings\n          </h2>\n          <h5 className=\"setting-name-title setting-input-title\">Your Name</h5>\n          <input type=\"text\" id=\"setting-name\" className=\"setting-name setting-input\" onChange={this.props.onChangeName} defaultValue={this.props.name} />\n          <h5 className=\"setting-icon-title setting-input-title\">Icon</h5>\n          <input type=\"file\" id=\"setting-icon\" className=\"setting-icon setting-input\" onChange={this.props.onChangeIcon} />\n          <button className=\"setting-button\" id=\"setting-button\" onClick={this.props.onClickUpdateButton}>Update</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  SettingComponent\n}\n","import \"./MyInfo.css\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { copyText } from \"../util\";\n\nclass MyInfoComponent extends React.Component {\n  copyId() {\n    copyText(this.props.address);\n    this.props.onCopyId();\n  }\n  render() {\n    let name = \"\";\n    let imageUrl = \"\";\n    if (this.props.profile && this.props.profile.nameInIpfs) {\n      name = this.props.profile.nameInIpfs;\n    }\n    if (this.props.profile && this.props.profile.imageUrl) {\n      imageUrl = this.props.profile.imageUrl;\n    }\n    return (\n      <div className=\"myinfo\">\n        <img className=\"myinfo-image\" alt=\"GxCert icon\" src={imageUrl} />\n        <div className=\"myinfo-right\">\n          <div className=\"myinfo-name\">\n            { name }\n          </div>\n          <div className=\"myinfo-address\">\n            { \"Your ID: \" + this.props.address }\n          </div>\n          <div className=\"myinfo-buttons\">\n            <a href=\"javascript:void(0)\" className=\"copy-button\" onClick={this.copyId.bind(this)}>Copy ID</a> | <Link className=\"myinfo-register\" to=\"/user\">Update your profile</Link> | <a href=\"javascript:void(0)\" className=\"export-button\" onClick={this.props.openExportModal}>Export Account</a> | <a href=\"javascript:void(0)\" className=\"logout-button\" onClick={this.props.logout}>Logout</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  MyInfoComponent\n}\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\nimport \"./Loading.css\";\n\nconst CommunicationLoading = () => (\n  <div className=\"loader\">\n  </div>\n\n);\n\nexport default CommunicationLoading;\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport CommunicationLoading from \"./Loading\";\nimport \"./BsModal.css\";\n\nexport default class BsModal extends React.Component {\n  render() {\n    let modal = null;\n    if (this.props.isLoading) {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            { this.props.message !== null ? (<p className=\"message\">{ this.props.message }</p>) : \"\" }\n            <CommunicationLoading />\n          </Modal.Body>\n        </Modal>\n      );\n    } else if (this.props.message !== null || this.props.errorMessage !== null) {\n      let checkMark = \"\";\n      if (this.props.message !== null && this.props.errorMessage === null) {\n        checkMark = (\n          <div className=\"center\">\n            <img src=\"/check.png\" className=\"check-mark\" />\n          </div>\n        );\n      }\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            <img src=\"/close.png\" className=\"close-button\" onClick={this.props.closeModal} />\n            {checkMark}\n            <p className=\"message\">{ this.props.message }</p>\n            <p className=\"error-message\">{ this.props.errorMessage }</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={this.props.closeModal} >\n              Back\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )\n    }\n    return (\n      <div className=\"modal\">\n        { modal }\n      </div>\n    );\n  }\n}\n","import * as IpfsHttpClient from \"ipfs-http-client\";\nconst ipfs = IpfsHttpClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\nasync function postCertificate(blob) {\n  const response = await ipfs.add(blob);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the certificate to IPFS network.\");\n}\nasync function postText(text) {\n  const response = await ipfs.add(text);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the text to IPFS network.\");\n}\n\nfunction createImageUrlFromUint8Array(arr) {\n  const blob = new Blob([arr]);\n  const urlCreator = window.URL || window.webkitURL;\n  const imageUrl = urlCreator.createObjectURL(blob);\n  return imageUrl;\n}\nvar concatBuffer = function (buffer1, buffer2) {\n  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n};\n\nasync function getImageOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    const url = createImageUrlFromUint8Array(content);\n    return url;\n  }\n  return null;\n}\n\nfunction uintToString(array) {\n  var out, i, len, c;\n  var char2, char3;\n\n  out = \"\";\n  len = array.length;\n  i = 0;\n  while (i < len) {\n    c = array[i++];\n    switch (c >> 4)\n    {\n      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12: case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(((c & 0x0F) << 12) |\n                                   ((char2 & 0x3F) << 6) |\n                                   ((char3 & 0x3F) << 0));\n        break;\n    }\n  }\n  return out;\n}\nasync function getTextOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    return uintToString(new Uint8Array(content));\n  }\n  return null;\n}\n\n\nexport { getImageOnIpfs, getTextOnIpfs, postCertificate, postText };\n","const crypto = require(\"crypto\");\n\nfunction getPixelsFromContext(context, width, height) {\n  let result = [];\n  for (let i = 0; i < height; i++) {\n    result.push([]);\n    for (let j = 0; j < width; j++) {\n      const pixel = context.getImageData(j, i, 1, 1).data;\n      result[i].push([pixel[0], pixel[1], pixel[2]]);\n    }\n  }\n  return result;\n}\n\nfunction getPixelsFromImage(fileElement) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    const img = new Image();\n    reader.onload = function () {\n      img.src = reader.result;\n      img.onload = function () {\n        const canvas = document.createElement(\"canvas\");\n        const context = canvas.getContext(\"2d\");\n        context.drawImage(img, 0, 0);\n        const pixels = getPixelsFromContext(context, img.width, img.height);\n        resolve(pixels);\n      };\n    };\n    reader.readAsDataURL(fileElement.files[0]);\n  });\n}\n\nasync function getHashFromImage(fileElement) {\n  const pixels = await getPixelsFromImage(fileElement);\n  return makeHashFromPixels(pixels);\n}\n\nfunction makeHashFromPixels(pixels) {\n  const text = pixels\n    .map((row) => {\n      console.log(row);\n      return row\n        .map((pixel) => {\n          return \"\" + pixel[0] + pixel[1] + pixel[2];\n        })\n        .join(\"\");\n    })\n    .join(\"\");\n  console.log(text);\n  const md5 = crypto.createHash(\"md5\");\n  return md5.update(text, \"binary\").digest(\"hex\");\n}\n\nfunction fileInputToDataURL(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener(\n      \"load\",\n      () => {\n        resolve(reader.result);\n      },\n      false\n    );\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction createBlobFromImageDataURI(uri) {\n  const byteString = atob(uri.split(\",\")[1]);\n  const mimeType = uri.match(/(:)([a-z/]+)(;)/)[2];\n  for (\n    var i = 0, l = byteString.length, content = new Uint8Array(l);\n    l > i;\n    i++\n  ) {\n    content[i] = byteString.charCodeAt(i);\n  }\n\n  const blob = new Blob([content], {\n    type: mimeType,\n  });\n  return blob;\n}\n\nexport { fileInputToDataURL, createBlobFromImageDataURI, getHashFromImage };\n","import React from \"react\";\nimport \"./Certificate.css\";\nimport { dateString } from \"../util\";\nimport { getImageOnIpfs } from \"../image-upload\";\n\nfunction displayedTitle(title) {\n  if (!title) {\n    return \"\";\n  }\n  if (title.length > 16) {\n    return title.substr(0, 16) + \"...\";\n  }\n  return title;\n}\nclass CertCellComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n  }\n  render() {\n    return (\n      <div className=\"cert-cell\">\n        <img src={!this.props.certificate.imageUrl ? \"\" : this.props.certificate.imageUrl} className=\"cert-cell-image\" alt=\"certificate\" />\n        <div className=\"cert-cell-info\">\n          <p className=\"cert-cell-title\">\n            { displayedTitle(this.props.certificate.titleInIpfs) }\n          </p>\n          <p className=\"cert-cell-issuer\">\n            { this.props.certificate.byProfile ? \"by \" + this.props.certificate.byProfile.name.substr(0, 16) : \"\" } { this.props.certificate.toProfile ? \"to \" + this.props.certificate.toProfile.name.substr(0, 16) : \"\" }\n          </p>\n          <p className=\"cert-cell-date\">\n            at {\n              dateString(new Date(this.props.certificate.time * 1000))\n            }\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  CertCellComponent\n};\n","import React from \"react\";\nimport { CommunicationLoading } from \"./components\";\nimport \"./Certificate.css\";\nimport { Link } from \"react-router-dom\";\nimport { CertCellComponent } from \"./CertCell\";\n\n\nclass CertListComponent extends React.Component {\n  componentDidMount() {\n    this.props.getInfoOfCertificates();\n  }\n  render() {\n    return (\n      <div className=\"certificates\">\n        { this.props.certificates.length === 0 ? <p className=\"certificate-not-found\">There are no certificates.</p> : \"\" }\n        { this.props.certificates.map((certificate, index) => {\n          return (\n            <Link to={\"/\" + this.props.path + \"/\" + index}>\n              <CertCellComponent certificate={certificate} />\n            </Link>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\n\nclass MyCertListComponent extends React.Component {\n  render() {\n    let path = \"\";\n    if (this.props.path) {\n      path = this.props.path;\n    }\n    return (\n      <div className=\"mycertificates\">\n        <h2 className=\"mycertificates-title\"><a href=\"javascript:void(0)\" onClick={this.props.changeTabToMyCertificates} className=\"mycertificates-tab\">My</a><a href=\"javascript:void(0)\" onClick={this.props.changeTabToIssuer} className=\"mycertificates-tab\" >Issued</a></h2>\n        { this.props.isLoading ? <CommunicationLoading /> : \"\" }\n        { !this.props.isLoading && this.props.tab === 0 ? <CertListComponent\n          certificates={this.props.certificates}\n          path={path + \"certs\"}\n          getInfoOfCertificates={this.props.getInfoOfCertificates}\n        /> : \"\" }\n        { !this.props.isLoading && this.props.tab === 1 ? <CertListComponent\n          certificates={this.props.certificatesIIssued}\n          getInfoOfCertificates={this.props.getInfoOfCertificatesIIssued}\n          path={path + \"issued\"}\n        /> : \"\" }\n      </div>\n    );\n  }\n}\n\nexport {\n  CertListComponent,\n  MyCertListComponent,\n}\n","import React from \"react\";\nimport { MyInfoComponent } from \"./MyInfo\";\nimport { MyCertListComponent } from \"./CertList\";\n\nclass MyPageComponent extends React.Component {\n  componentDidMount() {\n    if (this.props.certificates.length === 0) {\n      this.props.getCertificates();\n    }\n  }\n  render() {\n    return (\n      <div className=\"show\">\n        <MyInfoComponent \n          address={this.props.address} \n          profile={this.props.profile}\n          exportAccount={this.props.exportAccount} \n          onCopyId={this.props.onCopyId}\n          logout={this.props.logout}\n          openExportModal={this.props.openExportModal}\n        />\n        <MyCertListComponent \n          certificates={this.props.certificates}\n          certificatesIIssued={this.props.certificatesIIssued}\n          isLoading={this.props.isLoading} \n          getCertificates={this.props.getCertificates}\n          getCertificatesIIssued={this.props.getCertificatesIIssued}\n          changeTabToIssuer={this.props.changeTabToIssuer}\n          changeTabToMyCertificates={this.props.changeTabToMyCertificates}\n          tab={this.props.tab}\n          getInfoOfCertificates={this.props.getInfoOfCertificates}\n          getInfoOfCertificatesIIssued={this.props.getInfoOfCertificatesIIssued}\n        />\n      </div>\n    );\n  }\n}\n\nexport {\n  MyPageComponent,\n}\n","import React from \"react\";\n\nclass NotFoundComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"not-found\">\n        <h2>404 Not Found.</h2>\n      </div>\n    );\n  }\n}\n\nexport default NotFoundComponent;\n","import React from \"react\";\nimport \"./Certificate.css\";\nimport { getTextOnIpfs, getImageOnIpfs } from \"../image-upload\";\nimport { dateString } from \"../util\";\nimport { Link } from \"react-router-dom\";\nimport NotFoundComponent from \"./404\";\n\nclass CertViewComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    const index = parseInt(props.match.params.index);\n    let address = props.client.address;\n    if (props.fromUserPage) {\n      address = props.match.params.address;\n    }\n    this.index = index;\n    this.state = {\n      address,\n      index: index,\n      verified: null,\n    }\n  }\n  back() {\n    if (this.state.index > 0) {\n      this.setState({\n        index: this.state.index - 1,\n        verified: null,\n      });\n    }\n  }\n  next() {\n    if (this.state.index < this.props.certificates.length - 1) {\n      this.setState({\n        index: this.state.index + 1,\n        verified: null,\n      });\n    }\n  }\n  componentDidMount() {\n    const index = parseInt(this.props.match.params.index);\n    this.setState({\n      index,\n    });\n    const certificate = this.props.certificates[this.state.index];\n    if (this.props.fromUserPage) {\n      if (this.props.getCertificates) {\n        this.props.getCertificates(this.state.address);\n      }\n      if (this.props.getCertificatesIIssued) {\n        this.props.getCertificatesIIssued(this.state.address);\n      }\n    }\n  }\n  async verifyCertificate() {\n    const client = this.props.client;\n    const certificate = this.props.certificates[this.state.index];\n    let verified;\n    if (this.props.fromUserPage) {\n      verified = client.verifyCertificate(certificate, client.address);\n    } else {\n      verified = client.verifyCertificate(certificate, this.state.address);\n    }\n    this.setState({\n      verified: verified,\n    });\n  }\n  render() {\n    if (this.state.index < 0 || this.props.certificates.length <= this.state.index) {\n      return (\n        <NotFoundComponent />\n      );\n    }\n    const certificate = this.props.certificates[this.state.index];\n    return (\n      <div className=\"cert-view\">\n        <div className=\"cert-view-top\">\n          <button className=\"back\" onClick={this.back.bind(this)}>＜</button>\n          <img src={certificate.imageUrl} className=\"cert-view-image\" alt=\"GxCert\" />\n          <button className=\"next\" onClick={this.next.bind(this)}>＞</button>\n        </div>\n        <div className=\"cert-view-bottom\">\n          <button onClick={this.verifyCertificate.bind(this)} className=\"verify-button\">Verify</button>\n          <p className=\"cert-view-title\">\n            { this.state.verified ? \"✅ This certificate is valid.\" : \"\" }\n            { !this.state.verified && this.state.verified !== null ? \"❌ This certificate is invalid.\" : \"\" }<br/>\n            title: { certificate.titleInIpfs }<br/>\n            Issuer: <Link to={\"/users/\" + certificate.by } className=\"issuer\">{ !certificate.issuerName ? certificate.by.substr(0, 16) : certificate.issuerName }</Link> <br/>\n            Holder: { !certificate.to ? \"\" : \"to \" + certificate.to.substr(0, 16) } at {\n              dateString(new Date(certificate.time * 1000))\n            }\n          </p>\n          <p className=\"cert-view-description\">\n            description: <br/>\n            { certificate.descriptionInIpfs }\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  CertViewComponent\n}\n","import React from \"react\";\nimport { getImageOnIpfs } from \"../image-upload\";\nimport \"./User.css\";\nimport { MyCertListComponent } from \"./CertList\";\nimport NotFoundComponent from \"./404\";\n\nclass UserComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    const address = this.props.match.params.id;\n    this.props.fetchProfile(address);\n    this.props.getCertificates(address);\n  }\n  render() {\n    if (this.props.isNotFound) {\n      return (\n        <NotFoundComponent />\n      );\n    }\n    console.log(this.props);\n    const address = this.props.match.params.id;\n    let imageUrl = null;\n    if (this.props.profile) {\n      imageUrl = this.props.profile.imageUrl;\n    }\n    return (\n      <div className=\"user\">\n        <img src={imageUrl} className=\"user-icon\" />\n        <h2 className=\"user-name\">\n          { this.props.nameInIpfs }\n        </h2>\n        <MyCertListComponent\n          isLoading={this.props.isLoading}\n          certificates={this.props.certificates}\n          certificatesIIssued={this.props.certificatesIIssued}\n          getInfoOfCertificates={this.props.getInfoOfCertificates}\n          getInfoOfCertificatesIIssued={this.props.getInfoOfCertificatesIIssued}\n          getCertificates={this.props.getCertificates}\n          getCertificatesIIssued={this.props.getCertificatesIIssued}\n          changeTabToIssuer={() => {\n            return this.props.changeTabToIssuer(address);\n          }}\n          changeTabToMyCertificates={this.props.changeTabToMyCertificates}\n          tab={this.props.tab}\n          path={\"users/\" + address + \"/\"}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserComponent;\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport CommunicationLoading from \"./Loading\";\nimport \"./BsModal.css\";\n\nexport default class BsExportModal extends React.Component {\n  render() {\n    return (\n      <div className=\"modal\">\n        <Modal show={true} animation={true} >\n          <Modal.Body>\n            <img src=\"/close.png\" className=\"close-button\" onClick={this.props.closeModal} />\n            <p className=\"modal-title-text\">Seed Phrase</p>\n            <p className=\"modal-body-text\">You need the seed phrase in order to access your account when you change a browser or a laptop.<br/>Please save the seed phrase in safe place.</p>\n            <div className=\"modal-warning\">\n              Please do not share the seed phrase with anyone.<br/> You will leak all data associated with your seed phrase.\n            </div>\n            <p className=\"modal-label\">Your Seed Phrase</p>\n            <div className=\"modal-seed-box\">\n              { this.props.seed }\n            </div>\n            <div className=\"modal-seed-buttons\">\n              <button onClick={this.props.copyAccount}><img src=\"/copy.png\" className=\"copy-icon\" /> Copy to Clipboard</button>\n              <a href=\"javascript:void(0)\" onClick={this.props.exportFile}><img src=\"/export.png\" className=\"export-icon\" />  Export as JSON file</a>\n\n            </div>\n          </Modal.Body>\n        </Modal>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport CommunicationLoading from \"./Loading\";\nimport \"./BsModal.css\";\n\nexport default class BsIssueModal extends React.Component {\n  render() {\n    let modal = null;\n    if (this.props.isLoading) {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            <CommunicationLoading />\n            <p className=\"issue-modal-message\">\n              Issuing certificate...\n            </p>\n          </Modal.Body>\n        </Modal>\n      );\n    } else if (this.props.error) {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            <img src=\"/close.png\" className=\"close-button\" onClick={this.props.closeModal} />\n            <br/>\n            <div className=\"issued-image-wrapper\">\n              <img className=\"issued-image\" />\n            </div>\n            <p className=\"issue-modal-message\">Failed to issue certificate.</p>\n            <div className=\"issued-button-wrapper\">\n              <button className=\"issue-modal-close\" onClick={this.props.closeModal}>Close</button>\n            </div>\n          </Modal.Body>\n        </Modal>\n      )\n    } else {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            <img src=\"/close.png\" className=\"close-button\" onClick={this.props.closeModal} />\n            <br/>\n            <div className=\"issued-image-wrapper\">\n              <img src=\"/check.png\" className=\"issued-image\" />\n            </div>\n            <p className=\"issue-modal-message\">Successfully Issued.</p>\n            <div className=\"issued-button-wrapper\">\n              <button className=\"issue-modal-close\" onClick={this.props.closeModal}>Close</button>\n            </div>\n          </Modal.Body>\n        </Modal>\n      )\n    }\n    return (\n      <div className=\"modal\">\n        { modal }\n      </div>\n    );\n  }\n}\n","export default {\n  NORMAL: 1,\n  EXPORT: 2,\n  ISSUE: 3,\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { getGoogleUid } from \"./util\";\nimport CertClient, {clientWithoutAccount} from \"./client\";\nimport Login from \"./views/Login\";\nimport { IssueComponent } from \"./views/Issue\";\nimport { SettingComponent } from \"./views/Setting\";\nimport { BrowserRouter as Router, Route, Link, Switch, withRouter } from \"react-router-dom\";\nimport { MyPageComponent } from \"./views/MyPage\";\nimport { CertViewComponent } from \"./views/CertView\";\nimport UserComponent from \"./views/User\";\nimport BsModal from \"./views/components/BsModal\";\nimport BsExportModal from \"./views/components/BsExportModal\";\nimport BsIssueModal from \"./views/components/BsIssueModal\";\nimport ModalType from \"./modalType\";\n\n\nconst UI = {\n  byId: function(id) {\n    return document.getElementById(id);\n  },\n  showErrorMessage: function(message) {\n    console.error(message);\n  },\n  showMessage: function(message) {\n    console.log(message);\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.myPageRef = React.createRef();\n    this.state = {\n      myPageIsLoading: true,\n      issuePageIsLoading: false,\n      certificates: [],\n      message: null,\n    }\n  }\n  closeModal() {\n    this.setState({\n      issuePageIsLoading: false,\n      message: null,\n    });\n  }\n  render() {\n    const that = this;\n    console.log(that.props);\n    let normalModal = \"\";\n    const profile = this.props.state.myProfile;\n    const client = this.props.state.client;\n    let name = \"\";\n    if (client !== null && client.profile !== null) {\n      name = client.profile.nameInIpfs;\n    }\n    let icon = \"\";\n    if (profile) {\n      icon = profile.icon;\n    }\n    const login = (\n      <Login onClick={this.props.loginWithGoogle} />\n    );\n    let modal = \"\";\n    if (this.props.state.modal === ModalType.EXPORT) {\n      modal = (\n        <BsExportModal\n          seed={this.props.state.client.uid}\n          exportFile={this.props.exportFile} \n          copyAccount={this.props.copyAccount}\n          closeModal={this.props.closeModal}\n        />\n      );\n    } else if (this.props.state.modal === ModalType.NORMAL) {\n      modal = (\n        <BsModal show={true} closeModal={this.props.closeModal} isLoading={this.props.state.isLoading} message={this.props.state.message} errorMessage={this.props.state.errorMessage}/>\n      );\n    } else if (this.props.state.modal === ModalType.ISSUE) {\n      modal = (\n        <BsIssueModal show={true} closeModal={this.props.closeModal} isLoading={this.props.state.isIssuing} error={this.props.state.issueError}/>\n      );\n    }\n    const main = (\n        <div className=\"main\">\n          <header>\n          <h2 className=\"brand-logo\"><a href=\"/\">GxCert</a></h2>\n          <Link to=\"/issue\" className=\"header-issue-button header-button\">Issue</Link>\n          <Link to=\"/\" className=\"header-show-button header-button\">{client !== null && client.profile && client.profile.nameInIpfs ? client.profile.nameInIpfs.substr(0, 6) + \"...\" : \"Profile\" }</Link>\n          </header>\n          <div className=\"main\">\n            <Switch>\n              <Route exact path=\"/\" render={ () => <MyPageComponent \n                address={client.address} \n                profile={client.profile}\n                isLoading={that.props.state.myPageIsLoading} \n                certificates={that.props.state.certificates} \n                certificatesIIssued={that.props.state.certificatesIIssued}\n                getCertificates={that.props.getCertificates} \n                getCertificatesIIssued={that.props.getCertificatesIIssued} \n                openExportModal={that.props.openExportModal}\n                onCopyId={that.props.onCopyId}\n                getInfoOfCertificates={that.props.getInfoOfCertificates}\n                getInfoOfCertificatesIIssued={that.props.getInfoOfCertificatesIIssued}\n                changeTabToIssuer={that.props.changeTabToIssuer}\n                changeTabToMyCertificates={that.props.changeTabToMyCertificates}\n                tab={that.props.state.tabInMyPage}\n                logout={that.props.logout}\n              /> } />\n              <Route exact path=\"/issue\" render={ () => <IssueComponent \n                onClickIssueButton={this.props.issue} \n                onChangeCertificateImage={this.props.onChangeCertificateImage} \n                onChangeIssueTo={this.props.onChangeIssueTo} \n                onChangeTitle={this.props.onChangeTitle}\n                onChangeDescription={this.props.onChangeDescription}\n              /> } />\n              <Route exact path=\"/user\" render={ () => <SettingComponent \n                onClickUpdateButton={this.props.updateUserSetting} \n                onChangeName={this.props.onChangeName} \n                onChangeIcon={this.props.onChangeIcon} \n                name={name}\n              /> } />\n              <Route exact path=\"/users/:id\" render={ (routeProps) => <UserComponent\n                { ...routeProps }\n                profile={that.props.state.profileInUserPage}\n                fetchProfile={that.props.fetchProfileInUserPage}\n                imageUrl={that.props.state.iconInUserPage}\n                name={that.props.state.nameInUserPage}\n                isLoading={that.props.state.userPageIsLoading}\n                certificates={that.props.state.certificatesInUserPage}\n                certificatesIIssued={that.props.state.certificatesIIssuedInUserPage}\n                getCertificates={that.props.getCertificatesInUserPage}\n                getCertificatesIIssued={that.props.getCertificatesIIssuedInUserPage}\n                getInfoOfCertificates={that.props.getInfoOfCertificatesInUserPage}\n                getInfoOfCertificatesIIssued={that.props.getInfoOfCertificatesIIssuedInUserPage}\n                changeTabToIssuer={that.props.changeTabInUserPageToIssuer}\n                changeTabToMyCertificates={that.props.changeTabInUserPageToMyCertificates}\n                tab={that.props.state.tabInUserPage}\n                isNotFound={that.props.state.userIsNotFound}\n              /> } />\n              <Route exact path=\"/users/:address/issued/:index\" render={ (routeProps) => <CertViewComponent {...routeProps} \n                certificates={that.props.state.certificatesIIssuedInUserPage}\n                client={clientWithoutAccount}\n                getCertificates={that.props.getCertificatesInUserPage}\n                fromUserPage={true}\n              /> } />\n              <Route exact path=\"/users/:address/certs/:index\" render={ (routeProps) => <CertViewComponent {...routeProps} \n                certificates={that.props.state.certificatesInUserPage}\n                client={clientWithoutAccount}\n                getCertificatesIIssued={that.props.getCertificatesIIssuedInUserPage}\n                fromUserPage={true}\n              /> } />\n              <Route exact path=\"/issued/:index\" render={ (routeProps) => <CertViewComponent {...routeProps}\n                certificates={that.props.state.certificatesIIssued}\n                client={clientWithoutAccount}\n              />} />\n              <Route exact path=\"/certs/:index\" render={ (routeProps) => <CertViewComponent {...routeProps} \n                certificates={that.props.state.certificates} \n                client={clientWithoutAccount}\n              />} />\n            </Switch>\n          </div>\n          { modal }\n        </div>\n    );\n    return (\n        <div className=\"App\">\n          { !this.props.location.pathname.startsWith(\"/users/\") && client === null ? login : main }\n          <BsModal show={true} closeModal={this.props.closeModal} isLoading={this.props.state.isLoading} message={this.props.state.message} errorMessage={this.props.state.errorMessage}/>\n        </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import CertClient, { getClientFromState, clientWithoutAccount } from \"../client\"\nimport { getTextOnIpfs, postText, fileInputToDataURL, createBlobFromImageDataURI, postCertificate, getImageOnIpfs } from \"../image-upload\";\nimport { copyText, getGoogleUid } from \"../util\";\n\nconst getMyProfile = () => async (dispatch, getState) => {\n  const client = getState().state.client;\n  let profile;\n  try {\n    await client.getProfile(client.address, profile => {\n      dispatch({\n        type: \"GET_MYPROFILE\",\n        payload: profile,\n      });\n    });\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n}\nconst getCertificates = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES\",\n    payload: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  let certificates;\n  try {\n    certificates = await client.getCertificates(client.address);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"GET_CERTIFICATES\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  for (const [index, certificate] of certificates.entries()) {\n    certificate.index = index;\n    client.getTitle(client.address, index).then(certificates => {\n      dispatch({\n        type: \"GET_CERTIFICATES\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n      dispatch({\n        type: \"GET_CERTIFICATES\",\n        payload: null,\n        error: err,\n      });\n    });\n    client.getImageUrl(client.address, index).then(certificates => {\n      dispatch({\n        type: \"GET_CERTIFICATES\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n      dispatch({\n        type: \"GET_CERTIFICATES\",\n        payload: null,\n        error: err,\n      });\n    });\n  }\n}\n\nconst getCertificatesInUserPage = (address) => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES_IN_USER_PAGE\",\n    payload: null,\n  });\n  console.log(\"address\");\n  console.log(address);\n  const client = clientWithoutAccount;\n  let certificates;\n  try {\n    certificates = await client.getCertificates(address);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  for (const [index, certificate] of certificates.entries()) {\n    client.getTitle(address, index).then(certificates => {\n      dispatch({\n        type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n      dispatch({\n        type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n        payload: null,\n        error: err,\n      });\n    });\n    client.getImageUrl(address, index).then(certificates => {\n      dispatch({\n        type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n      dispatch({\n        type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n        payload: null,\n        error: err,\n      });\n    });\n  }\n}\nconst getCertificatesIIssued = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES_I_ISSUESED\",\n    payload: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  let certificates;\n  try {\n    certificates = await client.getCertificatesIIssued(client.address);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  for (const [index, certificate] of certificates.entries()) {\n    client.getTitle(client.address, index).then(certificates => {\n      dispatch({\n        type: \"GET_CERTIFICATES_I_ISSUESED\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n      dispatch({\n        type: \"GET_CERTIFICATES_I_ISSUESED\",\n        payload: null,\n        error: err,\n      });\n    });\n    client.getImageUrl(client.address, index).then(certificates => {\n      dispatch({\n        type: \"GET_CERTIFICATES_I_ISSUESED\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n      dispatch({\n        type: \"GET_CERTIFICATES_I_ISSUESED\",\n        payload: null,\n        error: err,\n      });\n    });\n  }\n}\nconst getCertificatesIIssuedInUserPage = (address) => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n    payload: null,\n  });\n  const client = clientWithoutAccount;\n  let certificates;\n  try {\n    certificates = await client.getCertificatesIIssued(address);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  for (const [index, certificate] of certificates.entries()) {\n    client.getTitle(address, index).then(certificates => {\n      dispatch({\n        type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n      dispatch({\n        type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n        payload: null,\n        error: err,\n      });\n    });\n    client.getImageUrl(address, index).then(certificates => {\n      dispatch({\n        type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n      dispatch({\n        type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n        payload: null,\n        error: err,\n      });\n    });\n  }\n}\nconst issue = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CLICK_ISSUE_BUTTON\",\n    payload: null,\n    error: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  const state = getState().state;\n  const issueTo = state.issueTo;\n  const image = state.certificateImage;\n  const title = state.title.trim();\n  const description = state.description.trim();\n  if (issueTo === null || image === null || title === \"\") {\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: new Error(\"The certificate image or address is not set.\"),\n    });\n    return;\n  }\n  let ipfsHashOfImage = null;\n  try {\n    const imageData = await fileInputToDataURL(image);\n    const blob = createBlobFromImageDataURI(imageData);\n    ipfsHashOfImage = await postCertificate(blob);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  let ipfsHashOfTitle = null;\n  try {\n    ipfsHashOfTitle = await postText(title);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  let ipfsHashOfDescription = null;\n  try {\n    ipfsHashOfDescription = await postText(description);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  try {\n    const certificate = client.createCertificateObject(ipfsHashOfTitle, ipfsHashOfDescription, ipfsHashOfImage, issueTo);\n    await client.issueCertificate(certificate, issueTo);\n  } catch(err) {\n    console.log(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  dispatch({\n    type: \"ISSUE\",\n    payload: null,\n    error: null,\n  });\n}\n\nconst onChangeCertificateImage = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_CERTIFICATE_IMAGE\",\n    payload: evt.target.files[0],\n  });\n}\n\nconst onChangeIssueTo = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_ISSUE_TO\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeDescription = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_DESCRIPTION\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeName = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeIcon = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_ICON\",\n    payload: evt.target.files[0],\n  });\n}\nconst onChangeTitle = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_TITLE\",\n    payload: evt.target.value,\n  });\n}\n\nconst closeModal = () => async (dispatch) => {\n  dispatch({\n    type: \"CLOSE_MODAL\",\n    payload: null,\n  });\n}\n\nconst updateUserSetting = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_UPDATE_USER_SETTING\",\n    payload: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  const state = getState().state;\n  if ((!state.name || state.name.trim() === \"\") && (!state.icon)) {\n    dispatch({\n      type: \"UPDATE_USER_SETTING\",\n      payload: null,\n      error: new Error(\"The input fields are empty.\"),\n    });\n    return;\n  }\n  if (state.name !== null && state.name.trim() !== \"\") {\n    let name = state.name.trim();\n    try {\n      await client.registerName(name);\n    } catch(err) {\n      dispatch({\n        type: \"UPDATE_USER_SETTING\",\n        payload: null,\n        error: err,\n      });\n      return;\n    }\n  }\n  if (state.icon !== null) {\n    let ipfsHashOfImage = null;\n    try {\n      const imageData = await fileInputToDataURL(state.icon);\n      const blob = createBlobFromImageDataURI(imageData);\n      ipfsHashOfImage = await postCertificate(blob);\n      await client.registerIcon(ipfsHashOfImage);\n    } catch(err) {\n      dispatch({\n        type: \"UPDATE_USER_SETTING\",\n        payload: null,\n        error: err,\n      });\n      return;\n    }\n  }\n  dispatch({\n    type: \"UPDATE_USER_SETTING\",\n    payload: null,\n    error: null,\n  });\n}\n\nconst onCopyId = () => async (dispatch) => {\n  dispatch({\n    type: \"ON_COPY_ID\",\n    payload: null,\n  });\n}\n\nconst changeTabToIssuer = () => async (dispatch) => {\n  console.log(\"change to issuer\");\n  dispatch({\n    type: \"CHANGE_TAB_TO_ISSUESER\",\n    payload: null,\n  });\n}\n\nconst changeTabToMyCertificates = () => async (dispatch) => {\n  dispatch({\n    type: \"CHANGE_TAB_TO_MY_CERTIFICATES\",\n    payload: null,\n  });\n}\n\nconst fetchProfileInUserPage = (id) => async (dispatch, getState) => {\n  const client = clientWithoutAccount;\n  if (!client) {\n    return;\n  }\n  let profile;\n  try {\n    profile = await client.getProfile(id, profile => {\n      dispatch({\n        type: \"FETCH_PROFILE_IN_USER_PAGE\",\n        payload: profile,\n      });\n    });\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"FETCH_PROFILE_IN_USER_PAGE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n}\n\nconst changeTabInUserPageToIssuer = () => async (dispatch) => {\n  dispatch({\n    type: \"CHANGE_TAB_IN_USER_PAGE_TO_ISSUESER\",\n    payload: null,\n  });\n}\nconst changeTabInUserPageToMyCertificates = () => async (dispatch) => {\n  dispatch({\n    type: \"CHANGE_TAB_IN_USER_PAGE_TO_MY_CERTIFICATES\",\n    payload: null,\n  });\n}\n\nconst getInfoOfCertificates = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificates;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.titleInIpfs && certificate.title) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs && certificate.description) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst getInfoOfCertificatesIIssued = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificatesIIssued;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.titleInIpfs && certificate.title) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs && certificate.description) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst getInfoOfCertificatesInUserPage = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificatesInUserPage;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.titleInIpfs) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst getInfoOfCertificatesIIssuedInUserPage = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificatesIIssuedInUserPage;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      });\n    }\n    if (!certificate.titleInIpfs) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst logout = () => async (dispatch) => {\n  dispatch({\n    type: \"LOGOUT\",\n    payload: null,\n  });\n}\n\nconst exportFile = (evt) => async (dispatch, getState) => {\n  const client = getClientFromState(getState().state.client);\n  const uid = client.uid;\n  const json = JSON.stringify({\n    uid,\n  })\n  const blob = new Blob([json], {type: \"application/json\"});\n  const a = evt.target;\n  a.download = \"account.json\";\n  a.href = window.URL.createObjectURL(blob);\n}\n\nconst openExportModal = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"OPEN_EXPORT_MODAL\",\n    payload: null,\n  });\n}\nconst closeExportModal = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"CLOSE_EXPORT_MODAL\",\n    payload: null,\n  });\n}\nconst copyAccount = () => async (dispatch, getState) => {\n  const client = getClientFromState(getState().state.client);\n  const uid = client.uid;\n  copyText(uid);\n}\n\nconst loginWithGoogle = () => async (dispatch) => {\n  const uid = await getGoogleUid();\n  const client = CertClient(uid + \"1\");\n  dispatch({\n    type: \"LOADING\",\n    payload: null,\n  });\n  await client.init();\n  console.log(client.address); \n  dispatch({\n    type: \"INITIALIZE_CLIENT\",\n    payload: client,\n  });\n}\n\nexport {\n  getMyProfile,\n  getCertificates,\n  getCertificatesInUserPage,\n  getCertificatesIIssued,\n  getCertificatesIIssuedInUserPage,\n  issue,\n  onChangeCertificateImage,\n  onChangeIssueTo,\n  onChangeName,\n  onChangeIcon,\n  onChangeDescription,\n  updateUserSetting,\n  exportFile,\n  onChangeTitle,\n  closeModal,\n  onCopyId,\n  changeTabToIssuer,\n  changeTabToMyCertificates,\n  fetchProfileInUserPage,\n  changeTabInUserPageToIssuer,\n  changeTabInUserPageToMyCertificates,\n  getInfoOfCertificates,\n  getInfoOfCertificatesInUserPage,\n  getInfoOfCertificatesIIssued,\n  getInfoOfCertificatesIIssuedInUserPage,\n  logout,\n  loginWithGoogle,\n  openExportModal,\n  closeExportModal,\n  copyAccount,\n}\n","import CertClient from \"./client\";\n\nconst initialState = {\n  uid: null,\n  isLoading: false,\n  certificateImage: null,\n  issueTo: null,\n  certificates: [],\n  certificatesIIssued: [],\n  myPageIsLoading: false,\n  myProfile: null,\n  name: \"\",\n  icon: null,\n  title: \"\",\n  errorMessage: null,\n  message: null,\n  tabInMyPage: 0,\n  iconInUserPage: null,\n  nameInUserPage: null,\n  profileInUserPage: null,\n  userPageIsLoading: false,\n  certificatesInUserPage: [],\n  certificatesIIssuedInUserPage: [],\n  tabInUserPage: 0,\n  client: null,\n  address: null,\n  description: \"\",\n  userIsNotFound: false,\n  modal: 0,\n  isIssuing: false,\n  issueError: false,\n}\n\nexport default initialState;\n","import { combineReducers, createStore, compose, applyMiddleware } from \"redux\";\nimport Reducer from \"./reducer\";\nimport thunk from \"redux-thunk\";\nimport { persistReducer, persistStore } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport initialState from \"./initialState\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, Reducer);\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers({\n    state: persistedReducer,\n  }),\n  initialState,\n  storeEnhancers(applyMiddleware(thunk))\n);\n\nexport const persistor = persistStore(store);\nexport default store;\n","\nimport initialState from \"./initialState\";\nimport ModalType from \"./modalType\";\n\nexport default function Reducer(state=initialState, action) {\n  switch(action.type) {\n    case \"ON_CLICK_ISSUE_BUTTON\":\n      return Object.assign({}, state, {\n        modal: ModalType.ISSUE,\n        isIssuing: true,\n      }); \n    case \"START_UPDATE_USER_SETTING\":\n      return Object.assign({}, state, {\n        modal: ModalType.NORMAL,\n        isLoading: true,\n        message: \"Updating your setting...\",\n      }); \n    case \"UPDATE_USER_SETTING\":\n      if ((!state.name || state.name.trim() === \"\") && (!state.icon)) {\n        return Object.assign({}, state, {\n          modal: ModalType.NORMAL,\n          isLoading: false,\n          message: null,\n          errorMessage: \"The input fields are empty.\",\n        });\n      }\n      if (action.error) {\n        return Object.assign({}, state, {\n          modal: ModalType.NORMAL,\n          isLoading: false,\n          message: null,\n          errorMessage: \"Failed to update your setting.\",\n        });\n      }\n      return Object.assign({}, state, {\n        modal: ModalType.NORMAL,\n        isLoading: false,\n        message: \"Successfully updated your setting.\",\n      }); \n    case \"ISSUE\":\n      if (state.issueTo === null || state.certificateImage === null || state.title.trim() === \"\") {\n        return Object.assign({}, state, {\n          modal: ModalType.ISSUE,\n          isIssuing: false,\n          issueError: true,\n        });\n        return;\n      }\n      if (action.error) {\n        return Object.assign({}, state, {\n          modal: ModalType.ISSUE,\n          isIssuing: false,\n          issueError: true,\n        });\n      }\n      return Object.assign({}, state, {\n        modal: ModalType.ISSUE,\n        isIssuing: false,\n        issueError: false,\n      });\n    case \"GET_CERTIFICATES\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          modal: ModalType.NORMAL,\n          myPageIsLoading: false,\n          errorMessage: \"Failed to fetch your certificates.\",\n        });\n      }\n      return Object.assign({}, state, {\n        certificates: action.payload,\n        myPageIsLoading: false,\n      });\n    case \"GET_CERTIFICATES_I_ISSUESED\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          modal: ModalType.NORMAL,\n          myPageIsLoading: false,\n          errorMessage: \"Failed to fetch the certificates that you issued.\",\n        });\n      }\n      return Object.assign({}, state, {\n        certificatesIIssued: action.payload,\n        myPageIsLoading: false,\n      });\n    case \"GET_CERTIFICATES_IN_USER_PAGE\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          certificatesInUserPage: [],\n          userPageIsLoading: false,\n        });\n      }\n      return Object.assign({}, state, {\n        certificatesInUserPage: action.payload,\n        userPageIsLoading: false,\n      });\n    case \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          certificatesIIssuedInUserPage: [],\n          userPageIsLoading: false,\n        });\n      }\n      return Object.assign({}, state, {\n        certificatesIIssuedInUserPage: action.payload,\n        userPageIsLoading: false,\n      });\n    case \"ON_CHANGE_CERTIFICATE_IMAGE\":\n      return Object.assign({}, state, {\n        certificateImage: action.payload,\n      });\n    case \"ON_CHANGE_ISSUE_TO\":\n      return Object.assign({}, state, {\n        issueTo: action.payload,\n      });\n    case \"ON_CHANGE_TITLE\":\n      return Object.assign({}, state, {\n        title: action.payload,\n      });\n    case \"START_GETTING_CERTIFICATES\":\n      return Object.assign({}, state, {\n        myPageIsLoading: true,\n        tabInMyPage: 0,\n      });\n    case \"START_GETTING_CERTIFICATES_I_ISSUESED\":\n      return Object.assign({}, state, {\n        myPageIsLoading: true,\n        tabInMyPage: 1,\n      });\n    case \"START_GETTING_CERTIFICATES_IN_USER_PAGE\":\n      return Object.assign({}, state, {\n        userPageIsLoading: true,\n        tabInUserPage: 0,\n      });\n    case \"START_GETTING_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\":\n      return Object.assign({}, state, {\n        userPageIsLoading: true,\n        tabInUserPage: 1,\n      });\n    case \"GET_MYPROFILE\":\n      return Object.assign({}, state, {\n        myProfile: action.payload,\n      });\n    case \"ON_CHANGE_NAME\":\n      return Object.assign({}, state, {\n        name: action.payload,\n      });\n    case \"ON_CHANGE_DESCRIPTION\":\n      return Object.assign({}, state, {\n        description: action.payload,\n      });\n    case \"ON_CHANGE_ICON\":\n      return Object.assign({}, state, {\n        icon: action.payload,\n      });\n    case \"CLOSE_MODAL\":\n      return Object.assign({}, state, {\n        modal: 0,\n        isLoading: false,\n        message: null,\n        errorMessage: null,\n      });\n    case \"ON_COPY_ID\":\n      return Object.assign({}, state, {\n        modal: ModalType.NORMAL,\n        message: \"Successfully copied your ID\",\n      });\n    case \"CHANGE_TAB_TO_ISSUESER\":\n      return Object.assign({}, state, {\n        tabInMyPage: 1,\n      });\n    case \"CHANGE_TAB_TO_MY_CERTIFICATES\":\n      return Object.assign({}, state, {\n        tabInMyPage: 0,\n      });\n    case \"FETCH_PROFILE_IN_USER_PAGE\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          profileInUserPage: null,\n          nameInUserPage: null,\n          userIsNotFound: true,\n        });\n      }\n      return Object.assign({}, state, {\n        profileInUserPage: action.payload,\n        nameInUserPage: action.payload.nameInIpfs,\n        userIsNotFound: false,\n      });\n    case \"FETCH_ICON_IN_USER_PAGE\":\n      return Object.assign({}, state, {\n        iconInUserPage: action.payload,\n      });\n    case \"LOGOUT\":\n      return initialState;\n    case \"INITIALIZE_CLIENT\":\n      return Object.assign({}, state, {\n        client: action.payload,\n        modal: ModalType.NORMAL,\n        isLoading: false,\n      });\n    case \"LOADING\":\n      return Object.assign({}, state, {\n        modal: ModalType.NORMAL,\n        isLoading: true,\n      });\n    case \"OPEN_EXPORT_MODAL\":\n      return Object.assign({}, state, {\n        modal: ModalType.EXPORT,\n      });\n    case \"CLOSE_EXPORT_MODAL\":\n      return Object.assign({}, state, {\n        modal: 0,\n      });\n    default:\n      return state;\n  }\n}\n\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { \n  loginWithGoogle, \n  logout, \n  getInfoOfCertificatesIIssued, \n  getInfoOfCertificatesIIssuedInUserPage, \n  getInfoOfCertificates, \n  getInfoOfCertificatesInUserPage, \n  getCertificatesInUserPage, \n  getCertificatesIIssuedInUserPage, \n  changeTabInUserPageToIssuer, \n  changeTabInUserPageToMyCertificates, \n  fetchProfileInUserPage, \n  changeTabToIssuer, \n  changeTabToMyCertificates, \n  onCopyId, \n  exportFile, \n  closeModal, \n  getMyProfile, \n  getCertificates, \n  getCertificatesIIssued, \n  issue, \n  onChangeIssueTo, \n  onChangeCertificateImage, \n  onChangeName, \n  onChangeIcon, \n  onChangeDescription,\n  updateUserSetting, \n  onChangeTitle,\n  openExportModal,\n  closeExportModal,\n  copyAccount,\n} from \"./actions\";\nimport { connect, Provider } from \"react-redux\";\nimport store, { persistor } from \"./store\";\nimport { withRouter, HashRouter as Router } from \"react-router-dom\";\nimport CertClient from \"./client\"\n\nfunction mapStateToProps(state, props) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    getCertificates: () => {\n      dispatch(getCertificates());\n    },\n    getCertificatesIIssued: () => {\n      dispatch(getCertificatesIIssued());\n    },\n    issue: () => {\n      dispatch(issue());\n    },\n    onChangeIssueTo: (evt) => {\n      dispatch(onChangeIssueTo(evt));\n    },\n    onChangeCertificateImage: (evt) => {\n      dispatch(onChangeCertificateImage(evt));\n    },\n    getMyProfile: () => {\n      dispatch(getMyProfile());\n    },\n    onChangeName: (evt) => {\n      dispatch(onChangeName(evt));\n    },\n    onChangeIcon: (evt) => {\n      dispatch(onChangeIcon(evt));\n    },\n    onChangeTitle: (evt) => {\n      dispatch(onChangeTitle(evt));\n    },\n    onChangeDescription: (evt) => {\n      dispatch(onChangeDescription(evt));\n    },\n    updateUserSetting: () => {\n      dispatch(updateUserSetting());\n    },\n    exportFile: (evt) => {\n      dispatch(exportFile(evt));\n    },\n    openExportModal: () => {\n      dispatch(openExportModal());\n    },\n    closeModal: () => {\n      dispatch(closeModal());\n    },\n    onCopyId: () => {\n      dispatch(onCopyId());\n    },\n    getCertificatesInUserPage: (address) => {\n      dispatch(getCertificatesInUserPage(address));\n    },\n    getCertificatesIIssuedInUserPage: (address) => {\n      dispatch(getCertificatesIIssuedInUserPage(address));\n    },\n    changeTabToIssuer: () => {\n      dispatch(getCertificatesIIssued());\n    },\n    changeTabToMyCertificates: () => {\n      dispatch(getCertificates());\n    },\n    changeTabInUserPageToIssuer: (address) => {\n      dispatch(getCertificatesIIssuedInUserPage(address));\n    },\n    changeTabInUserPageToMyCertificates: () => {\n      dispatch(changeTabInUserPageToMyCertificates());\n    },\n    fetchProfileInUserPage: (address) => {\n      dispatch(fetchProfileInUserPage(address));\n    },\n    getInfoOfCertificates: () => {\n      dispatch(getInfoOfCertificates());\n    },\n    getInfoOfCertificatesIIssued: () => {\n      dispatch(getInfoOfCertificatesIIssued());\n    },\n    getInfoOfCertificatesIIssuedInUserPage: () => {\n      dispatch(getInfoOfCertificatesIIssuedInUserPage());\n    },\n    getInfoOfCertificatesInUserPage: () => {\n      dispatch(getInfoOfCertificatesInUserPage());\n    },\n    logout: () => {\n      dispatch(logout());\n    },\n    loginWithGoogle: () => {\n      dispatch(loginWithGoogle());\n    },\n    closeExportModal: () => {\n      dispatch(closeExportModal());\n    },\n    copyAccount: () => {\n      dispatch(copyAccount());\n    }\n  }\n}\n\nconst RxApp = connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Router>\n        <RxApp />\n      </Router>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}