{"version":3,"sources":["util/Firebase.js","util/Google.js","util/index.js","client.js","views/Login.js","views/Issue.js","views/Setting.js","views/MyInfo.js","views/components/Loading.js","views/components/BsModal.js","image-upload/ipfs.js","image-upload/image.js","views/CertCell.js","views/CertList.js","views/MyPage.js","views/404.js","views/CertView.js","views/User.js","views/components/BsExportModal.js","views/components/BsIssueModal.js","modalType.js","App.js","reportWebVitals.js","actions/index.js","initialState.js","store.js","reducer.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","auth","GoogleAuthProvider","getGoogleUid","a","signInWithPopup","result","user","uid","copyText","text","copyFrom","document","createElement","textContent","bodyElm","getElementsByTagName","appendChild","select","execCommand","removeChild","dateString","date","getFullYear","getMonth","getDate","clientWithoutAccount","Client","getClientFromState","client","address","rsaKeyPair","privKey","cryptico","generateRSAKey","pubKey","publicKeyString","getKeyPair","profile","cache","seed","CertClient","Login","className","onClick","this","props","React","Component","IssueComponent","type","id","onChange","onChangeCertificateImage","onChangeTitle","onChangeDescription","onChangeIssueTo","onClickIssueButton","SettingComponent","onClickUpdateButton","onChangeName","defaultValue","name","onChangeIcon","MyInfoComponent","onCopyId","imageUrl","nameInIpfs","alt","src","href","copyId","bind","to","openExportModal","logout","CommunicationLoading","style","marginLeft","marginRight","width","BsModal","modal","isLoading","Modal","show","animation","Body","message","errorMessage","Footer","Button","variant","closeModal","ipfs","IpfsHttpClient","host","port","protocol","postCertificate","blob","add","response","path","Error","postText","createImageUrlFromUint8Array","arr","Blob","window","URL","webkitURL","createObjectURL","concatBuffer","buffer1","buffer2","tmp","Uint8Array","byteLength","set","buffer","getImageOnIpfs","ipfsHash","async","get","data","console","log","content","ArrayBuffer","url","uintToString","array","out","i","len","c","char2","char3","length","String","fromCharCode","getTextOnIpfs","require","fileInputToDataURL","file","Promise","resolve","reject","reader","FileReader","addEventListener","readAsDataURL","createBlobFromImageDataURI","uri","byteString","atob","split","mimeType","match","l","charCodeAt","CertCellComponent","certificate","title","titleInIpfs","substr","byProfile","toProfile","Date","time","CertListComponent","getInfoOfCertificates","certificates","map","index","MyCertListComponent","changeTabToMyCertificates","changeTabToIssuer","tab","certificatesIIssued","getInfoOfCertificatesIIssued","MyPageComponent","getCertificates","exportAccount","getCertificatesIIssued","NotFoundComponent","CertViewComponent","parseInt","params","fromUserPage","state","verified","setState","verifyCertificate","back","next","by","issuerName","descriptionInIpfs","UserComponent","fetchProfile","isNotFound","BsExportModal","copyAccount","exportFile","BsIssueModal","error","App","myPageRef","createRef","myPageIsLoading","issuePageIsLoading","that","myProfile","icon","login","loginWithGoogle","ModalType","isIssuing","issueError","main","exact","render","tabInMyPage","issue","updateUserSetting","routeProps","profileInUserPage","fetchProfileInUserPage","iconInUserPage","nameInUserPage","userPageIsLoading","certificatesInUserPage","certificatesIIssuedInUserPage","getCertificatesInUserPage","getCertificatesIIssuedInUserPage","getInfoOfCertificatesInUserPage","getInfoOfCertificatesIIssuedInUserPage","changeTabInUserPageToIssuer","changeTabInUserPageToMyCertificates","tabInUserPage","userIsNotFound","location","pathname","startsWith","withRouter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","dispatch","getState","payload","catch","err","initialState","certificateImage","issueTo","description","persistConfig","key","storage","persistedReducer","persistReducer","action","Object","assign","trim","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","persistor","persistStore","RxApp","connect","image","ipfsHashOfImage","imageData","ipfsHashOfTitle","ipfsHashOfDescription","createCertificateObject","issueCertificate","evt","target","value","files","getMyProfile","getProfile","registerName","registerIcon","json","JSON","stringify","download","init","closeExportModal","ReactDOM","loading","getElementById"],"mappings":"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","file":"static/js/main.4231525e.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBVg-6cdqXuAnS2gECbjHlbJd_Lt8qyQWw\",\n  authDomain: \"gxcert-21233.firebaseapp.com\",\n  projectId: \"gxcert-21233\",\n  storageBucket: \"gxcert-21233.appspot.com\",\n  messagingSenderId: \"500830367528\",\n  appId: \"1:500830367528:web:dfdb8fe5fa6b362d8faa1d\",\n  measurementId: \"G-ZGY6X71Q2R\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n//firebase.analytics();\n\nexport default firebase;\n","import firebase from \"./Firebase\";\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nasync function getGoogleUid() {\n  const result = await firebase.auth().signInWithPopup(provider);\n  return result.user.uid;\n}\n\nexport { getGoogleUid };\n","import { getGoogleUid } from \"./Google\";\n\nfunction copyText(text) {\n  const copyFrom = document.createElement(\"textarea\");\n  copyFrom.textContent = text;\n  const bodyElm = document.getElementsByTagName(\"body\")[0];\n  bodyElm.appendChild(copyFrom);\n  copyFrom.select();\n  document.execCommand('copy');\n  bodyElm.removeChild(copyFrom);\n}\n\nfunction getUrlQueries() {\n  let queryStr = window.location.search.slice(1);\n  let queries = {};\n  if (!queryStr) {\n    return queries;\n  }\n  queryStr.split(\"&\").forEach(function (queryStr) {\n    var queryArr = queryStr.split(\"=\");\n    queries[queryArr[0]] = queryArr[1];\n  });\n  return queries;\n}\nfunction dateString(date) {\n  return (\n    date.getFullYear() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getDate()\n  );\n}\n\n\nexport {\n  copyText,\n  getUrlQueries,\n  getGoogleUid,\n  dateString,\n}\n\n","import * as Client from \"gxcert-iota\";\nimport cryptico from \"cryptico\";\n\nconst clientWithoutAccount = new Client(\"https://nodes.devnet.iota.org\");\nfunction getKeyPair(uid) {\n  const privKey = cryptico.generateRSAKey(uid, 1024);\n  const pubKey = cryptico.publicKeyString(privKey);\n  return {\n    privKey,\n    pubKey,\n  }\n}\nfunction getClientFromState (client) {\n  const result = new Client(\"https://nodes.devnet.iota.org\");\n  result.address = client.address;\n  result.rsaKeyPair = getKeyPair(client.uid);\n  result.profile = client.profile;\n  result.cache = client.cache;\n  result.uid = client.uid;\n  result.seed = client.seed;\n  return result;\n}\n\nexport default function CertClient(uid) {\n  return new Client(\"https://nodes.devnet.iota.org\", uid);\n}\n\nexport {\n  getClientFromState,\n  clientWithoutAccount\n}\n\n","import React from \"react\";\nimport \"./Login.css\";\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div className=\"login-page\">\n        <button className=\"login-google\" onClick={this.props.onClick}>\n          Login with Google\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport \"./Issue.css\";\nimport \"./reset.css\";\n\n\nclass IssueComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"issue\">\n        <div className=\"issue-wrapper\">\n          <h2 className=\"issue-title\">Issue Certificate</h2>\n          <h5 className=\"issue-image-title issue-input-title\">Certificate Image</h5>\n          <input type=\"file\" id=\"issue-image\" className=\"issue-image issue-input\" onChange={this.props.onChangeCertificateImage} />\n          <h5 className=\"issue-to-title issue-input-title\">Title</h5>\n          <input type=\"text\" id=\"issue-title\" className=\"issue-input\" onChange={this.props.onChangeTitle} /><br/>\n          <h5 className=\"issue-to-description issue-input-title\">Description</h5>\n          <textarea id=\"issue-description\" className=\"issue-description issue-input\" onChange={this.props.onChangeDescription}></textarea><br/>\n          <h5 className=\"issue-to-title issue-input-title\">To</h5>\n          <input type=\"text\" id=\"issue-to\" className=\"issue-to issue-input\" onChange={this.props.onChangeIssueTo} /><br/>\n          <button className=\"issue-button\" id=\"issue-button\" onClick={this.props.onClickIssueButton}>Issue</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  IssueComponent,\n}\n","import React from \"react\";\nimport \"./Setting.css\";\n\nclass SettingComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickUpdateButton = props.onClickUpdateButton;\n  }\n  render () {\n    return (\n      <div className=\"setting\">\n        <div className=\"setting-wrapper\">\n          <h2 className=\"setting-title\">\n            User Settings\n          </h2>\n          <h5 className=\"setting-name-title setting-input-title\">Your Name</h5>\n          <input type=\"text\" id=\"setting-name\" className=\"setting-name setting-input\" onChange={this.props.onChangeName} defaultValue={this.props.name} />\n          <h5 className=\"setting-icon-title setting-input-title\">Icon</h5>\n          <input type=\"file\" id=\"setting-icon\" className=\"setting-icon setting-input\" onChange={this.props.onChangeIcon} />\n          <button className=\"setting-button\" id=\"setting-button\" onClick={this.props.onClickUpdateButton}>Update</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  SettingComponent\n}\n","import \"./MyInfo.css\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { copyText } from \"../util\";\n\nclass MyInfoComponent extends React.Component {\n  copyId() {\n    copyText(this.props.address);\n    this.props.onCopyId();\n  }\n  render() {\n    let name = \"\";\n    let imageUrl = \"\";\n    if (this.props.profile && this.props.profile.nameInIpfs) {\n      name = this.props.profile.nameInIpfs;\n    }\n    if (this.props.profile && this.props.profile.imageUrl) {\n      imageUrl = this.props.profile.imageUrl;\n    }\n    return (\n      <div className=\"myinfo\">\n        <img className=\"myinfo-image\" alt=\"GxCert icon\" src={imageUrl} />\n        <div className=\"myinfo-right\">\n          <div className=\"myinfo-name\">\n            { name }\n          </div>\n          <div className=\"myinfo-address\">\n            { \"Your ID: \" + this.props.address }\n          </div>\n          <div className=\"myinfo-buttons\">\n            <a href=\"javascript:void(0)\" className=\"copy-button\" onClick={this.copyId.bind(this)}>Copy ID</a> | <Link className=\"myinfo-register\" to=\"/user\">Update your profile</Link> | <a href=\"javascript:void(0)\" className=\"export-button\" onClick={this.props.openExportModal}>Export Account</a> | <a href=\"javascript:void(0)\" className=\"logout-button\" onClick={this.props.logout}>Logout</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  MyInfoComponent\n}\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\n\nconst CommunicationLoading = () => (\n  <ReactLoading type=\"spin\" style={{marginLeft: \"auto\", marginRight: \"auto\", width: 150}} />\n);\n\nexport default CommunicationLoading;\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport CommunicationLoading from \"./Loading\";\nimport \"./BsModal.css\";\n\nexport default class BsModal extends React.Component {\n  render() {\n    let modal = null;\n    if (this.props.isLoading) {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            { this.props.message !== null ? (<p className=\"message\">{ this.props.message }</p>) : \"\" }\n            <CommunicationLoading />\n          </Modal.Body>\n        </Modal>\n      );\n    } else if (this.props.message !== null || this.props.errorMessage !== null) {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            <span className=\"close-button\">x</span>\n            <p className=\"message\">{ this.props.message }</p>\n            <p className=\"error-message\">{ this.props.errorMessage }</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={this.props.closeModal} >\n              Back\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )\n    }\n    return (\n      <div className=\"modal\">\n        { modal }\n      </div>\n    );\n  }\n}\n","import * as IpfsHttpClient from \"ipfs-http-client\";\nconst ipfs = IpfsHttpClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\nasync function postCertificate(blob) {\n  const response = await ipfs.add(blob);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the certificate to IPFS network.\");\n}\nasync function postText(text) {\n  const response = await ipfs.add(text);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the text to IPFS network.\");\n}\n\nfunction createImageUrlFromUint8Array(arr) {\n  const blob = new Blob([arr]);\n  const urlCreator = window.URL || window.webkitURL;\n  const imageUrl = urlCreator.createObjectURL(blob);\n  return imageUrl;\n}\nvar concatBuffer = function (buffer1, buffer2) {\n  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n};\n\nasync function getImageOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    const url = createImageUrlFromUint8Array(content);\n    return url;\n  }\n  return null;\n}\n\nfunction uintToString(array) {\n  var out, i, len, c;\n  var char2, char3;\n\n  out = \"\";\n  len = array.length;\n  i = 0;\n  while (i < len) {\n    c = array[i++];\n    switch (c >> 4)\n    {\n      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12: case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(((c & 0x0F) << 12) |\n                                   ((char2 & 0x3F) << 6) |\n                                   ((char3 & 0x3F) << 0));\n        break;\n    }\n  }\n  return out;\n}\nasync function getTextOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    return uintToString(new Uint8Array(content));\n  }\n  return null;\n}\n\n\nexport { getImageOnIpfs, getTextOnIpfs, postCertificate, postText };\n","const crypto = require(\"crypto\");\n\nfunction getPixelsFromContext(context, width, height) {\n  let result = [];\n  for (let i = 0; i < height; i++) {\n    result.push([]);\n    for (let j = 0; j < width; j++) {\n      const pixel = context.getImageData(j, i, 1, 1).data;\n      result[i].push([pixel[0], pixel[1], pixel[2]]);\n    }\n  }\n  return result;\n}\n\nfunction getPixelsFromImage(fileElement) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    const img = new Image();\n    reader.onload = function () {\n      img.src = reader.result;\n      img.onload = function () {\n        const canvas = document.createElement(\"canvas\");\n        const context = canvas.getContext(\"2d\");\n        context.drawImage(img, 0, 0);\n        const pixels = getPixelsFromContext(context, img.width, img.height);\n        resolve(pixels);\n      };\n    };\n    reader.readAsDataURL(fileElement.files[0]);\n  });\n}\n\nasync function getHashFromImage(fileElement) {\n  const pixels = await getPixelsFromImage(fileElement);\n  return makeHashFromPixels(pixels);\n}\n\nfunction makeHashFromPixels(pixels) {\n  const text = pixels\n    .map((row) => {\n      console.log(row);\n      return row\n        .map((pixel) => {\n          return \"\" + pixel[0] + pixel[1] + pixel[2];\n        })\n        .join(\"\");\n    })\n    .join(\"\");\n  console.log(text);\n  const md5 = crypto.createHash(\"md5\");\n  return md5.update(text, \"binary\").digest(\"hex\");\n}\n\nfunction fileInputToDataURL(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener(\n      \"load\",\n      () => {\n        resolve(reader.result);\n      },\n      false\n    );\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction createBlobFromImageDataURI(uri) {\n  const byteString = atob(uri.split(\",\")[1]);\n  const mimeType = uri.match(/(:)([a-z/]+)(;)/)[2];\n  for (\n    var i = 0, l = byteString.length, content = new Uint8Array(l);\n    l > i;\n    i++\n  ) {\n    content[i] = byteString.charCodeAt(i);\n  }\n\n  const blob = new Blob([content], {\n    type: mimeType,\n  });\n  return blob;\n}\n\nexport { fileInputToDataURL, createBlobFromImageDataURI, getHashFromImage };\n","import React from \"react\";\nimport \"./Certificate.css\";\nimport { dateString } from \"../util\";\nimport { getImageOnIpfs } from \"../image-upload\";\n\nfunction displayedTitle(title) {\n  if (!title) {\n    return \"\";\n  }\n  if (title.length > 16) {\n    return title.substr(0, 16) + \"...\";\n  }\n  return title;\n}\nclass CertCellComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n  }\n  render() {\n    return (\n      <div className=\"cert-cell\">\n        <img src={!this.props.certificate.imageUrl ? \"\" : this.props.certificate.imageUrl} className=\"cert-cell-image\" alt=\"certificate\" />\n        <div className=\"cert-cell-info\">\n          <p className=\"cert-cell-title\">\n            { displayedTitle(this.props.certificate.titleInIpfs) }\n          </p>\n          <p className=\"cert-cell-issuer\">\n            { this.props.certificate.byProfile ? \"by \" + this.props.certificate.byProfile.name.substr(0, 16) : \"\" } { this.props.certificate.toProfile ? \"to \" + this.props.certificate.toProfile.name.substr(0, 16) : \"\" }\n          </p>\n          <p className=\"cert-cell-date\">\n            at {\n              dateString(new Date(this.props.certificate.time * 1000))\n            }\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  CertCellComponent\n};\n","import React from \"react\";\nimport { CommunicationLoading } from \"./components\";\nimport \"./Certificate.css\";\nimport { Link } from \"react-router-dom\";\nimport { CertCellComponent } from \"./CertCell\";\n\n\nclass CertListComponent extends React.Component {\n  componentDidMount() {\n    this.props.getInfoOfCertificates();\n  }\n  render() {\n    return (\n      <div className=\"certificates\">\n        { this.props.certificates.length === 0 ? <p className=\"certificate-not-found\">There are no certificates.</p> : \"\" }\n        { this.props.certificates.map((certificate, index) => {\n          return (\n            <Link to={\"/\" + this.props.path + \"/\" + index}>\n              <CertCellComponent certificate={certificate} />\n            </Link>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\n\nclass MyCertListComponent extends React.Component {\n  render() {\n    let path = \"\";\n    if (this.props.path) {\n      path = this.props.path;\n    }\n    return (\n      <div className=\"mycertificates\">\n        <h2 className=\"mycertificates-title\"><a href=\"javascript:void(0)\" onClick={this.props.changeTabToMyCertificates} className=\"mycertificates-tab\">My</a><a href=\"javascript:void(0)\" onClick={this.props.changeTabToIssuer} className=\"mycertificates-tab\" >Issued</a></h2>\n        { this.props.isLoading ? <CommunicationLoading /> : \"\" }\n        { !this.props.isLoading && this.props.tab === 0 ? <CertListComponent\n          certificates={this.props.certificates}\n          path={path + \"certs\"}\n          getInfoOfCertificates={this.props.getInfoOfCertificates}\n        /> : \"\" }\n        { !this.props.isLoading && this.props.tab === 1 ? <CertListComponent\n          certificates={this.props.certificatesIIssued}\n          getInfoOfCertificates={this.props.getInfoOfCertificatesIIssued}\n          path={path + \"issued\"}\n        /> : \"\" }\n      </div>\n    );\n  }\n}\n\nexport {\n  CertListComponent,\n  MyCertListComponent,\n}\n","import React from \"react\";\nimport { MyInfoComponent } from \"./MyInfo\";\nimport { MyCertListComponent } from \"./CertList\";\n\nclass MyPageComponent extends React.Component {\n  componentDidMount() {\n    if (this.props.certificates.length === 0) {\n      this.props.getCertificates();\n    }\n  }\n  render() {\n    return (\n      <div className=\"show\">\n        <MyInfoComponent \n          address={this.props.address} \n          profile={this.props.profile}\n          exportAccount={this.props.exportAccount} \n          onCopyId={this.props.onCopyId}\n          logout={this.props.logout}\n          openExportModal={this.props.openExportModal}\n        />\n        <MyCertListComponent \n          certificates={this.props.certificates}\n          certificatesIIssued={this.props.certificatesIIssued}\n          isLoading={this.props.isLoading} \n          getCertificates={this.props.getCertificates}\n          getCertificatesIIssued={this.props.getCertificatesIIssued}\n          changeTabToIssuer={this.props.changeTabToIssuer}\n          changeTabToMyCertificates={this.props.changeTabToMyCertificates}\n          tab={this.props.tab}\n          getInfoOfCertificates={this.props.getInfoOfCertificates}\n          getInfoOfCertificatesIIssued={this.props.getInfoOfCertificatesIIssued}\n        />\n      </div>\n    );\n  }\n}\n\nexport {\n  MyPageComponent,\n}\n","import React from \"react\";\n\nclass NotFoundComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"not-found\">\n        <h2>404 Not Found.</h2>\n      </div>\n    );\n  }\n}\n\nexport default NotFoundComponent;\n","import React from \"react\";\nimport \"./Certificate.css\";\nimport { getTextOnIpfs, getImageOnIpfs } from \"../image-upload\";\nimport { dateString } from \"../util\";\nimport { Link } from \"react-router-dom\";\nimport NotFoundComponent from \"./404\";\n\nclass CertViewComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    const index = parseInt(props.match.params.index);\n    let address = props.client.address;\n    if (props.fromUserPage) {\n      address = props.match.params.address;\n    }\n    this.index = index;\n    this.state = {\n      address,\n      index: index,\n      verified: null,\n    }\n  }\n  back() {\n    if (this.state.index > 0) {\n      this.setState({\n        index: this.state.index - 1,\n        verified: null,\n      });\n    }\n  }\n  next() {\n    if (this.state.index < this.props.certificates.length - 1) {\n      this.setState({\n        index: this.state.index + 1,\n        verified: null,\n      });\n    }\n  }\n  componentDidMount() {\n    const index = parseInt(this.props.match.params.index);\n    this.setState({\n      index,\n    });\n    const certificate = this.props.certificates[this.state.index];\n    if (this.props.fromUserPage) {\n      if (this.props.getCertificates) {\n        this.props.getCertificates(this.state.address);\n      }\n      if (this.props.getCertificatesIIssued) {\n        this.props.getCertificatesIIssued(this.state.address);\n      }\n    }\n  }\n  async verifyCertificate() {\n    const client = this.props.client;\n    const certificate = this.props.certificates[this.state.index];\n    let verified;\n    if (this.props.fromUserPage) {\n      verified = client.verifyCertificate(certificate, client.address);\n    } else {\n      verified = client.verifyCertificate(certificate, this.state.address);\n    }\n    this.setState({\n      verified: verified,\n    });\n  }\n  render() {\n    if (this.state.index < 0 || this.props.certificates.length <= this.state.index) {\n      return (\n        <NotFoundComponent />\n      );\n    }\n    const certificate = this.props.certificates[this.state.index];\n    return (\n      <div className=\"cert-view\">\n        <div className=\"cert-view-top\">\n          <button className=\"back\" onClick={this.back.bind(this)}>＜</button>\n          <img src={certificate.imageUrl} className=\"cert-view-image\" alt=\"GxCert\" />\n          <button className=\"next\" onClick={this.next.bind(this)}>＞</button>\n        </div>\n        <div className=\"cert-view-bottom\">\n          <button onClick={this.verifyCertificate.bind(this)} className=\"verify-button\">Verify</button>\n          <p className=\"cert-view-title\">\n            { this.state.verified ? \"✅ This certificate is valid.\" : \"\" }\n            { !this.state.verified && this.state.verified !== null ? \"❌ This certificate is invalid.\" : \"\" }<br/>\n            title: { certificate.titleInIpfs }<br/>\n            Issuer: <Link to={\"/users/\" + certificate.by } className=\"issuer\">{ !certificate.issuerName ? certificate.by.substr(0, 16) : certificate.issuerName }</Link> <br/>\n            Holder: { !certificate.to ? \"\" : \"to \" + certificate.to.substr(0, 16) } at {\n              dateString(new Date(certificate.time * 1000))\n            }\n          </p>\n          <p className=\"cert-view-description\">\n            description: <br/>\n            { certificate.descriptionInIpfs }\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {\n  CertViewComponent\n}\n","import React from \"react\";\nimport { getImageOnIpfs } from \"../image-upload\";\nimport \"./User.css\";\nimport { MyCertListComponent } from \"./CertList\";\nimport NotFoundComponent from \"./404\";\n\nclass UserComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    const address = this.props.match.params.id;\n    this.props.fetchProfile(address);\n    this.props.getCertificates(address);\n  }\n  render() {\n    if (this.props.isNotFound) {\n      return (\n        <NotFoundComponent />\n      );\n    }\n    console.log(this.props);\n    const address = this.props.match.params.id;\n    let imageUrl = null;\n    if (this.props.profile) {\n      imageUrl = this.props.profile.imageUrl;\n    }\n    return (\n      <div className=\"user\">\n        <img src={imageUrl} className=\"user-icon\" />\n        <h2 className=\"user-name\">\n          { this.props.nameInIpfs }\n        </h2>\n        <MyCertListComponent\n          isLoading={this.props.isLoading}\n          certificates={this.props.certificates}\n          certificatesIIssued={this.props.certificatesIIssued}\n          getInfoOfCertificates={this.props.getInfoOfCertificates}\n          getInfoOfCertificatesIIssued={this.props.getInfoOfCertificatesIIssued}\n          getCertificates={this.props.getCertificates}\n          getCertificatesIIssued={this.props.getCertificatesIIssued}\n          changeTabToIssuer={() => {\n            return this.props.changeTabToIssuer(address);\n          }}\n          changeTabToMyCertificates={this.props.changeTabToMyCertificates}\n          tab={this.props.tab}\n          path={\"users/\" + address + \"/\"}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserComponent;\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport CommunicationLoading from \"./Loading\";\nimport \"./BsModal.css\";\n\nexport default class BsExportModal extends React.Component {\n  render() {\n    return (\n      <div className=\"modal\">\n        <Modal show={true} animation={true} >\n          <Modal.Body>\n            <span className=\"close-button\" onClick={this.props.closeModal}>x</span>\n            <p className=\"modal-title-text\">Seed Phrase</p>\n            <p className=\"modal-body-text\">You need the seed phrase in order to access your account when you change a browser or a laptop.<br/>Please save the seed phrase in safe place.</p>\n            <div className=\"modal-warning\">\n              Please do not share the seed phrase with anyone.<br/> You will leak all data associated with your seed phrase.\n            </div>\n            <p className=\"modal-label\">Your Seed Phrase</p>\n            <div className=\"modal-seed-box\">\n              { this.props.seed }\n            </div>\n            <div className=\"modal-seed-buttons\">\n              <button onClick={this.props.copyAccount}>Copy to Clipboard</button>\n              <a href=\"javascript:void(0)\" onClick={this.props.exportFile}>Export as JSON file</a>\n\n            </div>\n          </Modal.Body>\n        </Modal>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport CommunicationLoading from \"./Loading\";\nimport \"./BsModal.css\";\n\nexport default class BsIssueModal extends React.Component {\n  render() {\n    let modal = null;\n    if (this.props.isLoading) {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            <CommunicationLoading />\n            <p className=\"issue-modal-message\">\n              Issuing certificate...\n            </p>\n          </Modal.Body>\n        </Modal>\n      );\n    } else if (this.props.error) {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            <span className=\"close-button\" onClick={this.props.closeModal}>x</span>\n            <br/>\n            <div className=\"issued-image-wrapper\">\n              <img className=\"issued-image\" />\n            </div>\n            <p className=\"issue-modal-message\">Failed to issue certificate.</p>\n            <div className=\"issued-button-wrapper\">\n              <button className=\"issue-modal-close\" onClick={this.props.closeModal}>Close</button>\n            </div>\n          </Modal.Body>\n        </Modal>\n      )\n    } else {\n      modal = (\n        <Modal show={this.props.show} animation={true} >\n          <Modal.Body>\n            <span className=\"close-button\" onClick={this.props.closeModal}>x</span>\n            <br/>\n            <div className=\"issued-image-wrapper\">\n              <img className=\"issued-image\" />\n            </div>\n            <p className=\"issue-modal-message\">Successfully Issued.</p>\n            <div className=\"issued-button-wrapper\">\n              <button className=\"issue-modal-close\" onClick={this.props.closeModal}>Close</button>\n            </div>\n          </Modal.Body>\n        </Modal>\n      )\n    }\n    return (\n      <div className=\"modal\">\n        { modal }\n      </div>\n    );\n  }\n}\n","export default {\n  NORMAL: 1,\n  EXPORT: 2,\n  ISSUE: 3,\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { getGoogleUid } from \"./util\";\nimport CertClient, {clientWithoutAccount} from \"./client\";\nimport Login from \"./views/Login\";\nimport { IssueComponent } from \"./views/Issue\";\nimport { SettingComponent } from \"./views/Setting\";\nimport { BrowserRouter as Router, Route, Link, Switch, withRouter } from \"react-router-dom\";\nimport { MyPageComponent } from \"./views/MyPage\";\nimport { CertViewComponent } from \"./views/CertView\";\nimport UserComponent from \"./views/User\";\nimport BsModal from \"./views/components/BsModal\";\nimport BsExportModal from \"./views/components/BsExportModal\";\nimport BsIssueModal from \"./views/components/BsIssueModal\";\nimport ModalType from \"./modalType\";\n\n\nconst UI = {\n  byId: function(id) {\n    return document.getElementById(id);\n  },\n  showErrorMessage: function(message) {\n    console.error(message);\n  },\n  showMessage: function(message) {\n    console.log(message);\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.myPageRef = React.createRef();\n    this.state = {\n      myPageIsLoading: true,\n      issuePageIsLoading: false,\n      certificates: [],\n      message: null,\n    }\n  }\n  closeModal() {\n    this.setState({\n      issuePageIsLoading: false,\n      message: null,\n    });\n  }\n  render() {\n    const that = this;\n    console.log(that.props);\n    let normalModal = \"\";\n    const profile = this.props.state.myProfile;\n    const client = this.props.state.client;\n    let name = \"\";\n    if (client !== null && client.profile !== null) {\n      name = client.profile.nameInIpfs;\n    }\n    let icon = \"\";\n    if (profile) {\n      icon = profile.icon;\n    }\n    const login = (\n      <Login onClick={this.props.loginWithGoogle} />\n    );\n    let modal = \"\";\n    if (this.props.state.modal === ModalType.EXPORT) {\n      modal = (\n        <BsExportModal\n          seed={this.props.state.client.uid}\n          exportFile={this.props.exportFile} \n          copyAccount={this.props.copyAccount}\n          closeModal={this.props.closeModal}\n        />\n      );\n    } else if (this.props.state.modal === ModalType.NORMAL) {\n      modal = (\n        <BsModal show={true} closeModal={this.props.closeModal} isLoading={this.props.state.isLoading} message={this.props.state.message} errorMessage={this.props.state.errorMessage}/>\n      );\n    } else if (this.props.state.modal === ModalType.ISSUE) {\n      modal = (\n        <BsIssueModal show={true} closeModal={this.props.closeModal} isLoading={this.props.state.isIssuing} error={this.props.state.issueError}/>\n      );\n    }\n    const main = (\n        <div className=\"main\">\n          <header>\n          <h2 className=\"brand-logo\"><a href=\"/\">GxCert</a></h2>\n          <Link to=\"/issue\" className=\"header-issue-button header-button\">Issue</Link>\n          <Link to=\"/\" className=\"header-show-button header-button\">{client !== null && client.profile && client.profile.nameInIpfs ? client.profile.nameInIpfs.substr(0, 6) + \"...\" : \"Profile\" }</Link>\n          </header>\n          <div className=\"main\">\n            <Switch>\n              <Route exact path=\"/\" render={ () => <MyPageComponent \n                address={client.address} \n                profile={client.profile}\n                isLoading={that.props.state.myPageIsLoading} \n                certificates={that.props.state.certificates} \n                certificatesIIssued={that.props.state.certificatesIIssued}\n                getCertificates={that.props.getCertificates} \n                getCertificatesIIssued={that.props.getCertificatesIIssued} \n                openExportModal={that.props.openExportModal}\n                onCopyId={that.props.onCopyId}\n                getInfoOfCertificates={that.props.getInfoOfCertificates}\n                getInfoOfCertificatesIIssued={that.props.getInfoOfCertificatesIIssued}\n                changeTabToIssuer={that.props.changeTabToIssuer}\n                changeTabToMyCertificates={that.props.changeTabToMyCertificates}\n                tab={that.props.state.tabInMyPage}\n                logout={that.props.logout}\n              /> } />\n              <Route exact path=\"/issue\" render={ () => <IssueComponent \n                onClickIssueButton={this.props.issue} \n                onChangeCertificateImage={this.props.onChangeCertificateImage} \n                onChangeIssueTo={this.props.onChangeIssueTo} \n                onChangeTitle={this.props.onChangeTitle}\n                onChangeDescription={this.props.onChangeDescription}\n              /> } />\n              <Route exact path=\"/user\" render={ () => <SettingComponent \n                onClickUpdateButton={this.props.updateUserSetting} \n                onChangeName={this.props.onChangeName} \n                onChangeIcon={this.props.onChangeIcon} \n                name={name}\n              /> } />\n              <Route exact path=\"/users/:id\" render={ (routeProps) => <UserComponent\n                { ...routeProps }\n                profile={that.props.state.profileInUserPage}\n                fetchProfile={that.props.fetchProfileInUserPage}\n                imageUrl={that.props.state.iconInUserPage}\n                name={that.props.state.nameInUserPage}\n                isLoading={that.props.state.userPageIsLoading}\n                certificates={that.props.state.certificatesInUserPage}\n                certificatesIIssued={that.props.state.certificatesIIssuedInUserPage}\n                getCertificates={that.props.getCertificatesInUserPage}\n                getCertificatesIIssued={that.props.getCertificatesIIssuedInUserPage}\n                getInfoOfCertificates={that.props.getInfoOfCertificatesInUserPage}\n                getInfoOfCertificatesIIssued={that.props.getInfoOfCertificatesIIssuedInUserPage}\n                changeTabToIssuer={that.props.changeTabInUserPageToIssuer}\n                changeTabToMyCertificates={that.props.changeTabInUserPageToMyCertificates}\n                tab={that.props.state.tabInUserPage}\n                isNotFound={that.props.state.userIsNotFound}\n              /> } />\n              <Route exact path=\"/users/:address/issued/:index\" render={ (routeProps) => <CertViewComponent {...routeProps} \n                certificates={that.props.state.certificatesIIssuedInUserPage}\n                client={clientWithoutAccount}\n                getCertificates={that.props.getCertificatesInUserPage}\n                fromUserPage={true}\n              /> } />\n              <Route exact path=\"/users/:address/certs/:index\" render={ (routeProps) => <CertViewComponent {...routeProps} \n                certificates={that.props.state.certificatesInUserPage}\n                client={clientWithoutAccount}\n                getCertificatesIIssued={that.props.getCertificatesIIssuedInUserPage}\n                fromUserPage={true}\n              /> } />\n              <Route exact path=\"/issued/:index\" render={ (routeProps) => <CertViewComponent {...routeProps}\n                certificates={that.props.state.certificatesIIssued}\n                client={clientWithoutAccount}\n              />} />\n              <Route exact path=\"/certs/:index\" render={ (routeProps) => <CertViewComponent {...routeProps} \n                certificates={that.props.state.certificates} \n                client={clientWithoutAccount}\n              />} />\n            </Switch>\n          </div>\n          { modal }\n        </div>\n    );\n    return (\n        <div className=\"App\">\n          { !this.props.location.pathname.startsWith(\"/users/\") && client === null ? login : main }\n          <BsModal show={true} closeModal={this.props.closeModal} isLoading={this.props.state.isLoading} message={this.props.state.message} errorMessage={this.props.state.errorMessage}/>\n        </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import CertClient, { getClientFromState, clientWithoutAccount } from \"../client\"\nimport { getTextOnIpfs, postText, fileInputToDataURL, createBlobFromImageDataURI, postCertificate, getImageOnIpfs } from \"../image-upload\";\nimport { copyText, getGoogleUid } from \"../util\";\n\nconst getMyProfile = () => async (dispatch, getState) => {\n  const client = getState().state.client;\n  let profile;\n  try {\n    await client.getProfile(client.address, profile => {\n      dispatch({\n        type: \"GET_MYPROFILE\",\n        payload: profile,\n      });\n    });\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n}\nconst getCertificates = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES\",\n    payload: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  client.getCertificates(client.address, (certificates) => {\n    console.log(certificates);\n    dispatch({\n      type: \"GET_CERTIFICATES\",\n      payload: certificates,\n    });\n  }).then(certificates => {\n    \n  }).catch(err => {\n    console.error(err);\n    dispatch({\n      type: \"GET_CERTIFICATES\",\n      payload: null,\n      error: err,\n    });\n  });\n}\n\nconst getCertificatesInUserPage = (address) => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES_IN_USER_PAGE\",\n    payload: null,\n  });\n  const client = clientWithoutAccount;\n  client.getCertificates(address, (certificates) => {\n    dispatch({\n      type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n      payload: certificates,\n    });\n  }).then(certificates => {\n    \n  }).catch(err => {\n    console.error(err);\n    dispatch({\n      type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n      payload: null,\n      error: err,\n    });\n  });\n}\nconst getCertificatesIIssued = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES_I_ISSUESED\",\n    payload: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  client.getCertificatesIIssued(client.address, (certificates) => {\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED\",\n      payload: certificates,\n    });\n  }).then(certificates => {\n\n  }).catch(err => {\n    console.error(err);\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED\",\n      payload: null,\n      error: err,\n    });\n  });\n}\nconst getCertificatesIIssuedInUserPage = (address) => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_GETTING_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n    payload: null,\n  });\n  const client = clientWithoutAccount;\n  client.getCertificatesIIssued(address, (certificates) => {\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n      payload: certificates,\n    });\n  }).then(certificates => {\n\n  }).catch(err => {\n    console.error(err);\n    dispatch({\n      type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n      payload: null,\n      error: err,\n    });\n  });\n}\nconst issue = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CLICK_ISSUE_BUTTON\",\n    payload: null,\n    error: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  const state = getState().state;\n  const issueTo = state.issueTo;\n  const image = state.certificateImage;\n  const title = state.title.trim();\n  const description = state.description.trim();\n  if (issueTo === null || image === null || title === \"\") {\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: new Error(\"The certificate image or address is not set.\"),\n    });\n    return;\n  }\n  let ipfsHashOfImage = null;\n  try {\n    const imageData = await fileInputToDataURL(image);\n    const blob = createBlobFromImageDataURI(imageData);\n    ipfsHashOfImage = await postCertificate(blob);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  let ipfsHashOfTitle = null;\n  try {\n    ipfsHashOfTitle = await postText(title);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  let ipfsHashOfDescription = null;\n  try {\n    ipfsHashOfDescription = await postText(description);\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  try {\n    const certificate = client.createCertificateObject(ipfsHashOfTitle, ipfsHashOfDescription, ipfsHashOfImage, issueTo);\n    await client.issueCertificate(certificate, issueTo);\n  } catch(err) {\n    console.log(err);\n    dispatch({\n      type: \"ISSUE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n  dispatch({\n    type: \"ISSUE\",\n    payload: null,\n    error: null,\n  });\n}\n\nconst onChangeCertificateImage = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_CERTIFICATE_IMAGE\",\n    payload: evt.target.files[0],\n  });\n}\n\nconst onChangeIssueTo = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_ISSUE_TO\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeDescription = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_DESCRIPTION\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeName = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeIcon = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_ICON\",\n    payload: evt.target.files[0],\n  });\n}\nconst onChangeTitle = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_TITLE\",\n    payload: evt.target.value,\n  });\n}\n\nconst closeModal = () => async (dispatch) => {\n  dispatch({\n    type: \"CLOSE_MODAL\",\n    payload: null,\n  });\n}\n\nconst updateUserSetting = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"START_UPDATE_USER_SETTING\",\n    payload: null,\n  });\n  const client = getClientFromState(getState().state.client);\n  const state = getState().state;\n  if ((!state.name || state.name.trim() === \"\") && (!state.icon)) {\n    dispatch({\n      type: \"UPDATE_USER_SETTING\",\n      payload: null,\n      error: new Error(\"The input fields are empty.\"),\n    });\n    return;\n  }\n  if (state.name !== null && state.name.trim() !== \"\") {\n    let name = state.name.trim();\n    try {\n      await client.registerName(name);\n    } catch(err) {\n      dispatch({\n        type: \"UPDATE_USER_SETTING\",\n        payload: null,\n        error: err,\n      });\n      return;\n    }\n  }\n  if (state.icon !== null) {\n    let ipfsHashOfImage = null;\n    try {\n      const imageData = await fileInputToDataURL(state.icon);\n      const blob = createBlobFromImageDataURI(imageData);\n      ipfsHashOfImage = await postCertificate(blob);\n      await client.registerIcon(ipfsHashOfImage);\n    } catch(err) {\n      dispatch({\n        type: \"UPDATE_USER_SETTING\",\n        payload: null,\n        error: err,\n      });\n      return;\n    }\n  }\n  dispatch({\n    type: \"UPDATE_USER_SETTING\",\n    payload: null,\n    error: null,\n  });\n}\n\nconst onCopyId = () => async (dispatch) => {\n  dispatch({\n    type: \"ON_COPY_ID\",\n    payload: null,\n  });\n}\n\nconst changeTabToIssuer = () => async (dispatch) => {\n  console.log(\"change to issuer\");\n  dispatch({\n    type: \"CHANGE_TAB_TO_ISSUESER\",\n    payload: null,\n  });\n}\n\nconst changeTabToMyCertificates = () => async (dispatch) => {\n  dispatch({\n    type: \"CHANGE_TAB_TO_MY_CERTIFICATES\",\n    payload: null,\n  });\n}\n\nconst fetchProfileInUserPage = (id) => async (dispatch, getState) => {\n  const client = clientWithoutAccount;\n  if (!client) {\n    return;\n  }\n  let profile;\n  try {\n    profile = await client.getProfile(id, profile => {\n      dispatch({\n        type: \"FETCH_PROFILE_IN_USER_PAGE\",\n        payload: profile,\n      });\n    });\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"FETCH_PROFILE_IN_USER_PAGE\",\n      payload: null,\n      error: err,\n    });\n    return;\n  }\n}\n\nconst changeTabInUserPageToIssuer = () => async (dispatch) => {\n  dispatch({\n    type: \"CHANGE_TAB_IN_USER_PAGE_TO_ISSUESER\",\n    payload: null,\n  });\n}\nconst changeTabInUserPageToMyCertificates = () => async (dispatch) => {\n  dispatch({\n    type: \"CHANGE_TAB_IN_USER_PAGE_TO_MY_CERTIFICATES\",\n    payload: null,\n  });\n}\n\nconst getInfoOfCertificates = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificates;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.titleInIpfs && certificate.title) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs && certificate.description) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst getInfoOfCertificatesIIssued = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificatesIIssued;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.titleInIpfs && certificate.title) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs && certificate.description) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst getInfoOfCertificatesInUserPage = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificatesInUserPage;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.titleInIpfs) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst getInfoOfCertificatesIIssuedInUserPage = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const certificates = state.certificatesIIssuedInUserPage;\n  for (const certificate of certificates) {\n    if (!certificate.imageUrl) {\n      getImageOnIpfs(certificate.ipfs).then(imageUrl => {\n        certificate.imageUrl = imageUrl;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      });\n    }\n    if (!certificate.titleInIpfs) {\n      getTextOnIpfs(certificate.title).then(title => {\n        certificate.titleInIpfs = title;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n    if (!certificate.descriptionInIpfs) {\n      getTextOnIpfs(certificate.description).then(description => {\n        certificate.descriptionInIpfs = description;\n        dispatch({\n          type: \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }\n}\n\nconst logout = () => async (dispatch) => {\n  dispatch({\n    type: \"LOGOUT\",\n    payload: null,\n  });\n}\n\nconst exportFile = (evt) => async (dispatch, getState) => {\n  const client = getClientFromState(getState().state.client);\n  const uid = client.uid;\n  const json = JSON.stringify({\n    uid,\n  })\n  const blob = new Blob([json], {type: \"application/json\"});\n  const a = evt.target;\n  a.download = \"account.json\";\n  a.href = window.URL.createObjectURL(blob);\n}\n\nconst openExportModal = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"OPEN_EXPORT_MODAL\",\n    payload: null,\n  });\n}\nconst closeExportModal = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"CLOSE_EXPORT_MODAL\",\n    payload: null,\n  });\n}\nconst copyAccount = () => async (dispatch, getState) => {\n  const client = getClientFromState(getState().state.client);\n  const uid = client.uid;\n  copyText(uid);\n}\n\nconst loginWithGoogle = () => async (dispatch) => {\n  const uid = await getGoogleUid();\n  const client = CertClient(uid + \"1\");\n  dispatch({\n    type: \"LOADING\",\n    payload: null,\n  });\n  await client.init();\n  console.log(client.address); \n  dispatch({\n    type: \"INITIALIZE_CLIENT\",\n    payload: client,\n  });\n}\n\nexport {\n  getMyProfile,\n  getCertificates,\n  getCertificatesInUserPage,\n  getCertificatesIIssued,\n  getCertificatesIIssuedInUserPage,\n  issue,\n  onChangeCertificateImage,\n  onChangeIssueTo,\n  onChangeName,\n  onChangeIcon,\n  onChangeDescription,\n  updateUserSetting,\n  exportFile,\n  onChangeTitle,\n  closeModal,\n  onCopyId,\n  changeTabToIssuer,\n  changeTabToMyCertificates,\n  fetchProfileInUserPage,\n  changeTabInUserPageToIssuer,\n  changeTabInUserPageToMyCertificates,\n  getInfoOfCertificates,\n  getInfoOfCertificatesInUserPage,\n  getInfoOfCertificatesIIssued,\n  getInfoOfCertificatesIIssuedInUserPage,\n  logout,\n  loginWithGoogle,\n  openExportModal,\n  closeExportModal,\n  copyAccount,\n}\n","import CertClient from \"./client\";\n\nconst initialState = {\n  uid: null,\n  isLoading: false,\n  certificateImage: null,\n  issueTo: null,\n  certificates: [],\n  certificatesIIssued: [],\n  myPageIsLoading: false,\n  myProfile: null,\n  name: \"\",\n  icon: null,\n  title: \"\",\n  errorMessage: null,\n  message: null,\n  tabInMyPage: 0,\n  iconInUserPage: null,\n  nameInUserPage: null,\n  profileInUserPage: null,\n  userPageIsLoading: false,\n  certificatesInUserPage: [],\n  certificatesIIssuedInUserPage: [],\n  tabInUserPage: 0,\n  client: null,\n  address: null,\n  description: \"\",\n  userIsNotFound: false,\n  modal: 0,\n  isIssuing: false,\n  issueError: false,\n}\n\nexport default initialState;\n","import { combineReducers, createStore, compose, applyMiddleware } from \"redux\";\nimport Reducer from \"./reducer\";\nimport thunk from \"redux-thunk\";\nimport { persistReducer, persistStore } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport initialState from \"./initialState\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, Reducer);\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers({\n    state: persistedReducer,\n  }),\n  initialState,\n  storeEnhancers(applyMiddleware(thunk))\n);\n\nexport const persistor = persistStore(store);\nexport default store;\n","\nimport initialState from \"./initialState\";\nimport ModalType from \"./modalType\";\n\nexport default function Reducer(state=initialState, action) {\n  switch(action.type) {\n    case \"ON_CLICK_ISSUE_BUTTON\":\n      return Object.assign({}, state, {\n        modal: ModalType.ISSUE,\n        isIssuing: true,\n      }); \n    case \"START_UPDATE_USER_SETTING\":\n      return Object.assign({}, state, {\n        modal: ModalType.NORMAL,\n        isLoading: true,\n        message: \"Updating your setting...\",\n      }); \n    case \"UPDATE_USER_SETTING\":\n      if ((!state.name || state.name.trim() === \"\") && (!state.icon)) {\n        return Object.assign({}, state, {\n          modal: ModalType.NORMAL,\n          isLoading: false,\n          message: null,\n          errorMessage: \"The input fields are empty.\",\n        });\n      }\n      if (action.error) {\n        return Object.assign({}, state, {\n          modal: ModalType.NORMAL,\n          isLoading: false,\n          message: null,\n          errorMessage: \"Failed to update your setting.\",\n        });\n      }\n      return Object.assign({}, state, {\n        modal: ModalType.NORMAL,\n        isLoading: false,\n        message: \"Successfully updated your setting.\",\n      }); \n    case \"ISSUE\":\n      if (state.issueTo === null || state.certificateImage === null || state.title.trim() === \"\") {\n        return Object.assign({}, state, {\n          modal: ModalType.ISSUE,\n          isIssuing: false,\n          issueError: true,\n        });\n        return;\n      }\n      if (action.error) {\n        return Object.assign({}, state, {\n          modal: ModalType.ISSUE,\n          isIssuing: false,\n          issueError: true,\n        });\n      }\n      return Object.assign({}, state, {\n        modal: ModalType.ISSUE,\n        isIssuing: false,\n        issueError: false,\n      });\n    case \"GET_CERTIFICATES\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          modal: ModalType.NORMAL,\n          myPageIsLoading: false,\n          errorMessage: \"Failed to fetch your certificates.\",\n        });\n      }\n      return Object.assign({}, state, {\n        certificates: action.payload,\n        myPageIsLoading: false,\n      });\n    case \"GET_CERTIFICATES_I_ISSUESED\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          modal: ModalType.NORMAL,\n          myPageIsLoading: false,\n          errorMessage: \"Failed to fetch the certificates that you issued.\",\n        });\n      }\n      return Object.assign({}, state, {\n        certificatesIIssued: action.payload,\n        myPageIsLoading: false,\n      });\n    case \"GET_CERTIFICATES_IN_USER_PAGE\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          certificatesInUserPage: [],\n          userPageIsLoading: false,\n        });\n      }\n      return Object.assign({}, state, {\n        certificatesInUserPage: action.payload,\n        userPageIsLoading: false,\n      });\n    case \"GET_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          certificatesIIssuedInUserPage: [],\n          userPageIsLoading: false,\n        });\n      }\n      return Object.assign({}, state, {\n        certificatesIIssuedInUserPage: action.payload,\n        userPageIsLoading: false,\n      });\n    case \"ON_CHANGE_CERTIFICATE_IMAGE\":\n      return Object.assign({}, state, {\n        certificateImage: action.payload,\n      });\n    case \"ON_CHANGE_ISSUE_TO\":\n      return Object.assign({}, state, {\n        issueTo: action.payload,\n      });\n    case \"ON_CHANGE_TITLE\":\n      return Object.assign({}, state, {\n        title: action.payload,\n      });\n    case \"START_GETTING_CERTIFICATES\":\n      return Object.assign({}, state, {\n        myPageIsLoading: true,\n        tabInMyPage: 0,\n      });\n    case \"START_GETTING_CERTIFICATES_I_ISSUESED\":\n      return Object.assign({}, state, {\n        myPageIsLoading: true,\n        tabInMyPage: 1,\n      });\n    case \"START_GETTING_CERTIFICATES_IN_USER_PAGE\":\n      return Object.assign({}, state, {\n        userPageIsLoading: true,\n        tabInUserPage: 0,\n      });\n    case \"START_GETTING_CERTIFICATES_I_ISSUESED_IN_USER_PAGE\":\n      return Object.assign({}, state, {\n        userPageIsLoading: true,\n        tabInUserPage: 1,\n      });\n    case \"GET_MYPROFILE\":\n      return Object.assign({}, state, {\n        myProfile: action.payload,\n      });\n    case \"ON_CHANGE_NAME\":\n      return Object.assign({}, state, {\n        name: action.payload,\n      });\n    case \"ON_CHANGE_DESCRIPTION\":\n      return Object.assign({}, state, {\n        description: action.payload,\n      });\n    case \"ON_CHANGE_ICON\":\n      return Object.assign({}, state, {\n        icon: action.payload,\n      });\n    case \"CLOSE_MODAL\":\n      return Object.assign({}, state, {\n        modal: 0,\n        isLoading: false,\n        message: null,\n        errorMessage: null,\n      });\n    case \"ON_COPY_ID\":\n      return Object.assign({}, state, {\n        modal: ModalType.NORMAL,\n        message: \"Successfully copied your ID\",\n      });\n    case \"CHANGE_TAB_TO_ISSUESER\":\n      return Object.assign({}, state, {\n        tabInMyPage: 1,\n      });\n    case \"CHANGE_TAB_TO_MY_CERTIFICATES\":\n      return Object.assign({}, state, {\n        tabInMyPage: 0,\n      });\n    case \"FETCH_PROFILE_IN_USER_PAGE\":\n      if (action.error) {\n        return Object.assign({}, state, {\n          profileInUserPage: null,\n          nameInUserPage: null,\n          userIsNotFound: true,\n        });\n      }\n      return Object.assign({}, state, {\n        profileInUserPage: action.payload,\n        nameInUserPage: action.payload.nameInIpfs,\n        userIsNotFound: false,\n      });\n    case \"FETCH_ICON_IN_USER_PAGE\":\n      return Object.assign({}, state, {\n        iconInUserPage: action.payload,\n      });\n    case \"LOGOUT\":\n      return initialState;\n    case \"INITIALIZE_CLIENT\":\n      return Object.assign({}, state, {\n        client: action.payload,\n        modal: ModalType.NORMAL,\n        isLoading: false,\n      });\n    case \"LOADING\":\n      return Object.assign({}, state, {\n        modal: ModalType.NORMAL,\n        isLoading: true,\n      });\n    case \"OPEN_EXPORT_MODAL\":\n      return Object.assign({}, state, {\n        modal: ModalType.EXPORT,\n      });\n    case \"CLOSE_EXPORT_MODAL\":\n      return Object.assign({}, state, {\n        modal: 0,\n      });\n    default:\n      return state;\n  }\n}\n\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { \n  loginWithGoogle, \n  logout, \n  getInfoOfCertificatesIIssued, \n  getInfoOfCertificatesIIssuedInUserPage, \n  getInfoOfCertificates, \n  getInfoOfCertificatesInUserPage, \n  getCertificatesInUserPage, \n  getCertificatesIIssuedInUserPage, \n  changeTabInUserPageToIssuer, \n  changeTabInUserPageToMyCertificates, \n  fetchProfileInUserPage, \n  changeTabToIssuer, \n  changeTabToMyCertificates, \n  onCopyId, \n  exportFile, \n  closeModal, \n  getMyProfile, \n  getCertificates, \n  getCertificatesIIssued, \n  issue, \n  onChangeIssueTo, \n  onChangeCertificateImage, \n  onChangeName, \n  onChangeIcon, \n  onChangeDescription,\n  updateUserSetting, \n  onChangeTitle,\n  openExportModal,\n  closeExportModal,\n  copyAccount,\n} from \"./actions\";\nimport { connect, Provider } from \"react-redux\";\nimport store, { persistor } from \"./store\";\nimport { withRouter, HashRouter as Router } from \"react-router-dom\";\nimport CertClient from \"./client\"\n\nfunction mapStateToProps(state, props) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    getCertificates: () => {\n      dispatch(getCertificates());\n    },\n    getCertificatesIIssued: () => {\n      dispatch(getCertificatesIIssued());\n    },\n    issue: () => {\n      dispatch(issue());\n    },\n    onChangeIssueTo: (evt) => {\n      dispatch(onChangeIssueTo(evt));\n    },\n    onChangeCertificateImage: (evt) => {\n      dispatch(onChangeCertificateImage(evt));\n    },\n    getMyProfile: () => {\n      dispatch(getMyProfile());\n    },\n    onChangeName: (evt) => {\n      dispatch(onChangeName(evt));\n    },\n    onChangeIcon: (evt) => {\n      dispatch(onChangeIcon(evt));\n    },\n    onChangeTitle: (evt) => {\n      dispatch(onChangeTitle(evt));\n    },\n    onChangeDescription: (evt) => {\n      dispatch(onChangeDescription(evt));\n    },\n    updateUserSetting: () => {\n      dispatch(updateUserSetting());\n    },\n    exportFile: (evt) => {\n      dispatch(exportFile(evt));\n    },\n    openExportModal: () => {\n      dispatch(openExportModal());\n    },\n    closeModal: () => {\n      dispatch(closeModal());\n    },\n    onCopyId: () => {\n      dispatch(onCopyId());\n    },\n    getCertificatesInUserPage: (address) => {\n      dispatch(getCertificatesInUserPage(address));\n    },\n    getCertificatesIIssuedInUserPage: (address) => {\n      dispatch(getCertificatesIIssuedInUserPage(address));\n    },\n    changeTabToIssuer: () => {\n      dispatch(getCertificatesIIssued());\n    },\n    changeTabToMyCertificates: () => {\n      dispatch(getCertificates());\n    },\n    changeTabInUserPageToIssuer: (address) => {\n      dispatch(getCertificatesIIssuedInUserPage(address));\n    },\n    changeTabInUserPageToMyCertificates: () => {\n      dispatch(changeTabInUserPageToMyCertificates());\n    },\n    fetchProfileInUserPage: (address) => {\n      dispatch(fetchProfileInUserPage(address));\n    },\n    getInfoOfCertificates: () => {\n      dispatch(getInfoOfCertificates());\n    },\n    getInfoOfCertificatesIIssued: () => {\n      dispatch(getInfoOfCertificatesIIssued());\n    },\n    getInfoOfCertificatesIIssuedInUserPage: () => {\n      dispatch(getInfoOfCertificatesIIssuedInUserPage());\n    },\n    getInfoOfCertificatesInUserPage: () => {\n      dispatch(getInfoOfCertificatesInUserPage());\n    },\n    logout: () => {\n      dispatch(logout());\n    },\n    loginWithGoogle: () => {\n      dispatch(loginWithGoogle());\n    },\n    closeExportModal: () => {\n      dispatch(closeExportModal());\n    },\n    copyAccount: () => {\n      dispatch(copyAccount());\n    }\n  }\n}\n\nconst RxApp = connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Router>\n        <RxApp />\n      </Router>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}